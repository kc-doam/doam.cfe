
// Вставляет штрихкод вместо тэга в файле DocX
Функция ВставитьШтрихкодВместоТэгаВФайлDocx(
	Тэг, 
	ДвоичныеДанныеИзображения, 
	ДвоичныеДанныеФайла, 
	Расширение,
	ВысотаШтрихкода) Экспорт
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();
	
	ИДкартинки = 0;
	СчетчикСвязей = 0;
	СохранитьИзображениеВоВнутреннейСтруктуреDocx(ВременнаяПапкаДляРазархивирования, ДвоичныеДанныеИзображения, ИДкартинки, СчетчикСвязей);
		
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Обязательно нужно ставить Ложь, иначе будут пропадать пробелы
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	КартинкаШтрихкода = Ложь;
	Пока ЧтениеXML.Прочитать() Цикл	
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				Если ЧтениеXML.Имя = "name" И ЧтениеXML.Значение = Тэг Тогда
					КартинкаШтрихкода = Истина;
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение); 
				ИначеЕсли КартинкаШтрихкода И ЧтениеXML.Имя = "r:embed" Тогда
					КартинкаШтрихкода = Ложь;
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,"rId" + Строка(СчетчикСвязей + 1));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Найти(ЧтениеXML.Значение, Тэг) > 0 Тогда
				НовоеЗначение = СтрЗаменить(ЧтениеXML.Значение, "&lt;&lt;"+Тэг+"&gt;&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "&lt;"+Тэг+"&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<<"+Тэг+">>" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<"+Тэг+">" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, Тэг, "_");
				МакетДляВставкиШтрихкода = ПолучитьОбщийМакет("ВставкаИзображенияВместоТегаВDocx");
				ТекстДляВставки = МакетДляВставкиШтрихкода.ПолучитьТекст();
				ТекстДляВставки = "</w:t>" + ТекстДляВставки + "<w:t>";
				
				ВысотаШтрихкодаЗначение = (ВысотаШтрихкода / 25.4) * 914400;
				ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "_ВысотаШтрихкода_", Формат(ВысотаШтрихкодаЗначение,"ЧДЦ=0; ЧГ=0"));
				
				ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "_ИДКартинкиВоВнутреннейПапке_", "rId" + Строка(СчетчикСвязей + 1));
				
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "_", ТекстДляВставки);
				ЗаписьXML.ЗаписатьБезОбработки(НовоеЗначение);
			Иначе
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;

	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml", ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

Процедура СохранитьИзображениеВоВнутреннейСтруктуреDocx(
	ВременнаяПапкаДляРазархивирования, 
	ДвоичныеДанныеКартинки, 
	ИДкартинки, 
	СчетчикСвязей)
	
	//сохранение картинки штрихкода во внутренней структуре файла docx
	СоздатьКаталог(ВременнаяПапкаДляРазархивирования + "/word/media");
	МассивФайлов = НайтиФайлы(ВременнаяПапкаДляРазархивирования + "/word/media", "Image*.*", Истина);
	
	Для Каждого НайденныйФайл Из МассивФайлов Цикл
		ИДкартинки = ИДкартинки + 1;
	Конеццикла;
	КартинкаШК = Новый Картинка(ДвоичныеДанныеКартинки);
	КартинкаШК.Записать(ВременнаяПапкаДляРазархивирования + "/word/media/Image" + Строка(ИДкартинки + 1) + ".jpeg");
	ЧтениеФайлаСвязей = Новый ЧтениеXML();
	ЧтениеФайлаСвязей.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/_rels/document.xml.rels");
	ЗаписьФайлаСвязей = Новый ЗаписьXML();
	ЗаписьФайлаСвязей.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/_rels/document_update.xml.rels");
	ЗаписьФайлаСвязей.ЗаписатьОбъявлениеXML();
	Пока ЧтениеФайлаСвязей.Прочитать() Цикл
		Если ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаСвязей.ЗаписатьНачалоЭлемента(ЧтениеФайлаСвязей.Имя);
			Пока ЧтениеФайлаСвязей.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаСвязей.ЗаписатьАтрибут(ЧтениеФайлаСвязей.Имя,ЧтениеФайлаСвязей.Значение); 
				Если ЧтениеФайлаСвязей.Имя = "Id" Тогда
					СчетчикСвязей = СчетчикСвязей + 1;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаСвязей.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеФайлаСвязей.Имя = "Relationships" Тогда
				НоваяСтрока = "<Relationship Target=""media/Image" + Строка(ИДкартинки + 1) + ".jpeg"" Type=""http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"" Id=""rId" + Строка(СчетчикСвязей + 1) + """/>";
				ЗаписьФайлаСвязей.ЗаписатьБезОбработки(НоваяСтрока);
			КонецЕсли;
			ЗаписьФайлаСвязей.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
    ЧтениеФайлаСвязей.Закрыть();
	ЗаписьФайлаСвязей.Закрыть();
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/_rels/document_update.xml.rels", ВременнаяПапкаДляРазархивирования + "/word/_rels/document.xml.rels");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/_rels/document_update.xml.rels");
	
	//расширение опсиания типов содержимого в файле docx
	ЧтениеФайлаТипов = Новый ЧтениеXML();
	ЧтениеФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	ЗаписьФайлаТипов = Новый ЗаписьXML();
	ЗаписьФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");		
	ЗаписьФайлаТипов.ЗаписатьОбъявлениеXML();
	АтрибутJPEGНайден = Ложь;
	Пока ЧтениеФайлаТипов.Прочитать() Цикл
		Если ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаТипов.ЗаписатьНачалоЭлемента(ЧтениеФайлаТипов.Имя);
			Пока ЧтениеФайлаТипов.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаТипов.ЗаписатьАтрибут(ЧтениеФайлаТипов.Имя,ЧтениеФайлаТипов.Значение); 
				Если ЧтениеФайлаТипов.Имя = "Extension" И ЧтениеФайлаТипов.Значение = "jpeg" Тогда
					АтрибутJPEGНайден = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаТипов.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеФайлаТипов.Имя = "Types" И НЕ АтрибутJPEGНайден Тогда
				НоваяСтрока = "<Default Extension=""jpeg"" ContentType=""image/jpeg""/>";
				ЗаписьФайлаТипов.ЗаписатьБезОбработки(НоваяСтрока);
			КонецЕсли;
			ЗаписьФайлаТипов.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	ЧтениеФайлаТипов.Закрыть();
	ЗаписьФайлаТипов.Закрыть();
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml", ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");

КонецПроцедуры

// Вставляет регистрационный штамп в файле DocX 
Функция ВставитьИзображениеЭПВФайлDocxСУказаниемПоложения(
	Расширение, 
	ТекстНадписи, 
	ДвоичныеДанныеФайла, 
	ДвоичныеДанныеКартинки, 
	ПоложениеНаСтранице, 
	ВысотаКартинки) Экспорт
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();

	//Заполнение полей в теле документа
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	//получение макета для вставки регштампа
	МакетДляВставки = ПолучитьОбщийМакет("ВставкаИзображенияЭПСУказаниемПоложенияDocx");
	ТекстДляВставкиШтампа = МакетДляВставки.ПолучитьТекст();
		
	//установка положения и прочих параметров
	СмещениеПоГоризонтали = 0;
	СмещениеПоВертикали = 0;
	ГоризонтальноеВыравнивание = "";
	ОтносительночегоСчитатьГоризонтальноеВыравнивание = "margin";
	ВертикальноеВыравнивание = "";
	ОтносительноЧегоСчитатьВертикальноеВыравнивание = "margin";
	
	Если ЗначениеЗаполнено(ТекстНадписи) Тогда
		ИмяКомпании = ТекстНадписи.НазваниеОрганизации;
		РегистрационныйНомер = ТекстНадписи.РегНомер;
		ДатаРегистрации = ТекстНадписи.Регдата;
	КонецЕсли;

	//Высота штрихкода в EMU (English Metrick Units)
	ВысотаШтрихкода = (ВысотаКартинки / 25.4) * 914400;
	
	Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыПечатиШтампаЭП.ПравыйНижний") Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MAX";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыПечатиШтампаЭП.ПравыйВерхний") Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыПечатиШтампаЭП.ЛевыйВерхний") Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.ВариантыПечатиШтампаЭП.ЛевыйНижний") Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MAX";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНадписи) Тогда
		Если СмещениеПоГоризонтали = "MAX" Тогда
			//выравнивание к правому краю
			ГоризонтальноеВыравнивание = "mso-position-horizontal:right";
		ИначеЕсли СмещениеПоГоризонтали = "MIN" Тогда
			//выравнивание к левому краю
			ГоризонтальноеВыравнивание = "mso-position-horizontal:left";
		Иначе
			////если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в Point'ы
			////1 д = 1/72"
			//ОтносительночегоСчитатьГоризонтальноеВыравнивание = "page";
			//СмещениеПоГоризонтали = (ДанныеОПоложении.СмещениеПоГоризонтали / 25.4) * 72;
		КонецЕсли;
		
		Если СмещениеПоВертикали = "MAX" Тогда
			//выравнивание по нижнему краю
			ВертикальноеВыравнивание = "mso-position-vertical:bottom";
		ИначеЕсли СмещениеПоВертикали = "MIN" Тогда
			//выравнивание по верхнему краю
			ВертикальноеВыравнивание = "mso-position-vertical:top";
		Иначе
			////если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в Point'ы
			//ОтносительноЧегоСчитатьВертикальноеВыравнивание = "page";
			//СмещениеПоВертикали =(ДанныеОПоложении.СмещениеПоВертикали / 25.4) * 72;
		КонецЕсли;

		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоГоризонтали_", Формат(СмещениеПоГоризонтали,"ЧДЦ=0; ЧГ=0") + "pt");
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", Формат(СмещениеПоВертикали,"ЧДЦ=0; ЧГ=0") + "pt");
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ГоризонтальноеВыравнивание_", ГоризонтальноеВыравнивание);
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ВертикальноеВыравнивание_", ВертикальноеВыравнивание);
	Иначе
		
		Если СмещениеПоГоризонтали = "MAX" Тогда
			//выравнивание к правому краю
			СмещениеПоГоризонтали = "<wp:align>right</wp:align>";
		ИначеЕсли СмещениеПоГоризонтали = "MIN" Тогда
			//выравнивание к левому краю
			СмещениеПоГоризонтали = "<wp:align>left</wp:align>";
		Иначе
			////если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в EMU
			////1 д = 1/72"
			//ОтносительночегоСчитатьГоризонтальноеВыравнивание = "page";
			//СмещениеПоГоризонталиЗначение = (ДанныеОПоложении.СмещениеПоГоризонтали / 25.4) * 914400;
			//СмещениеПоГоризонтали = "<wp:posOffset>" + Формат(СмещениеПоГоризонталиЗначение,"ЧДЦ=0; ЧГ=0") + "</wp:posOffset>";
		КонецЕсли;
		
		Если СмещениеПоВертикали = "MAX" Тогда
			//выравнивание по нижнему краю
			СмещениеПоВертикали = "<wp:align>bottom</wp:align>";
		ИначеЕсли СмещениеПоВертикали = "MIN" Тогда
			//выравнивание по верхнему краю
			СмещениеПоВертикали = "<wp:align>top</wp:align>";
		Иначе
			////если задано произвольное расположение, то переведем смещение по горизонтали из миллиметров в EMU
			//ОтносительноЧегоСчитатьВертикальноеВыравнивание = "page";
			//СмещениеПоВертикалиЗначение =(ДанныеОПоложении.СмещениеПоВертикали / 25.4) * 914400;
			//СмещениеПоВертикали = "<wp:posOffset>" + Формат(СмещениеПоВертикалиЗначение,"ЧДЦ=0; ЧГ=0") + "</wp:posOffset>";
		КонецЕсли;

		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоГоризонтали_", Формат(СмещениеПоГоризонтали,"ЧДЦ=0; ЧГ=0"));
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", Формат(СмещениеПоВертикали,"ЧДЦ=0; ЧГ=0"));
		
	КонецЕсли;
	
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ОтносительноЧегоСчитатьВертикальноеСмещение_", ОтносительноЧегоСчитатьВертикальноеВыравнивание);
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ОтносительноЧегоСчитатьГоризонтальноеСмещение_", ОтносительночегоСчитатьГоризонтальноеВыравнивание);
	
	ИДкартинки = 0;
	СчетчикСвязей = 0;
	СохранитьИзображениеВоВнутреннейСтруктуреDocx(ВременнаяПапкаДляРазархивирования, ДвоичныеДанныеКартинки, ИДкартинки, СчетчикСвязей);
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ИДКартинкиВоВнутреннейПапке_", "rId" + Строка(СчетчикСвязей + 1));
	ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ВысотаШтрихкода_", Формат(ВысотаШтрихкода,"ЧДЦ=0; ЧГ=0"));
	
	// Обязательно нужно ставить Ложь, иначе будут пропадать пробелы
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	//вставка разметки для регштампа в файл
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ВставитьШтамп = Ложь;
			Если ЧтениеXML.Имя = "w:body" Тогда
				ВставитьШтамп = Истина;
			КонецЕсли;
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение); 
			КонецЦикла;
			Если ВставитьШтамп Тогда
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДляВставкиШтампа);
				ВставитьШтамп = Ложь;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml", ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции
