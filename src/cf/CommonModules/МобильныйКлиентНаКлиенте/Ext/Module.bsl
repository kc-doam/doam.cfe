
#Область ПрограммныйИнтерфейс

// Выполняет получение мультимедиа данных от устройства.
//
// Параметры:
//  ТипДанных - Строка- Идентификатор данных: "Фото", "Видео", "Аудио", "Файл".
//  ОписаниеОповещения - ОписаниеОповещения - Опо
// 
// Возвращаемое значение:
//  ДанныеМультимедиа или Строка - Полученные данные мультимедиа.
//
Процедура НачатьПолучениеМультимедиаДанных(ТипДанных, ОписаниеОповещения) Экспорт
	
	МультимедиаДанные = Неопределено;
#Если МобильныйКлиент Тогда
	Если ТипДанных = "Фото" 
		И СредстваМультимедиа.ПоддерживаетсяФотоснимок() Тогда
		
		КачествоФото = 75;
		МультимедиаДанные = СредстваМультимедиа.СделатьФотоснимок(, , КачествоФото);
		
	ИначеЕсли ТипДанных = "Видео" 
		И СредстваМультимедиа.ПоддерживаетсяВидеозапись() Тогда
		
		МультимедиаДанные = СредстваМультимедиа.СделатьВидеозапись();
		
	ИначеЕсли ТипДанных = "Аудио" 
		И СредстваМультимедиа.ПоддерживаетсяАудиозапись() Тогда
		
		МультимедиаДанные = СредстваМультимедиа.СделатьАудиозапись();

	ИначеЕсли ТипДанных = "Файл" Тогда
		
		ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения);
		
	КонецЕсли;
#Иначе
	ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения);
#КонецЕсли
	
	Если МультимедиаДанные <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, МультимедиаДанные);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру описание файла мультимедиа.
//
// Параметры:
//  Мультимедиа - ДанныеМультимедиа, Строка - Сведения о файле.
// 
// Возвращаемое значение:
//  Структура - Описание параметров файла мультимедиа.
//   * Ссылка               - УникальныйИдентификатор - Идентификатор нового файла;
//   * АдресВременногоФайла - Строка - Путь к файлу на диске;
//   * Расширение           - Строка - Тип файла (расширение);
//   * Размер               - Строка - Представление размера файла;
//   * Представление        - Строка - Представление файла (имя).
//   * Ошибка               - Строка - Текстовое описание ошибки.
//
Функция ИнформацияОМультимедиаФайле(Мультимедиа) Экспорт
	
	Если Мультимедиа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	Возврат Неопределено;
#Иначе
	ПредставлениеФайла = Неопределено;
	Расширение = Неопределено;
	ИмяВременногоФайла = Неопределено;
	ФайлДляКопирования = Неопределено;
	РазмерДанных = Неопределено;
	
	Если ТипЗнч(Мультимедиа) = Тип("Строка") Тогда
		
		//Мультимедиа - это адрес текущего файла
		Файл = Новый Файл(Мультимедиа);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		РазмерДанных = Файл.Размер();
		Расширение = Файл.Расширение;
		ПредставлениеФайла = Файл.Имя;
		
		// Если расширение пустое, тогда надо получить его другим путем.
		Если СтрНачинаетсяС(Файл.ПолноеИмя, "content") И ПустаяСтрока(Расширение) Тогда
			ПредставлениеФайла = Файл.ПолучитьПредставлениеФайлаБиблиотекиМобильногоУстройства();
			
			ПоложениеТочки = СтрНайти(ПредставлениеФайла, ".", НаправлениеПоиска.СКонца);
			Если ПоложениеТочки > 0 Тогда
				Расширение = Сред(ПредставлениеФайла, ПоложениеТочки + 1);
			КонецЕсли;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ФайлДляКопирования = Мультимедиа;
		
	Иначе
		Расширение = Мультимедиа.РасширениеФайла;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ФайлДляКопирования = Мультимедиа.ПолучитьДвоичныеДанные();
		РазмерДанных = ФайлДляКопирования.Размер();
		
	КонецЕсли;
	
	Ошибка = Неопределено;
	
	Если Ошибка = Неопределено Тогда
		Если ТипЗнч(ФайлДляКопирования) = Тип("Строка") Тогда
			КопироватьФайл(ФайлДляКопирования, ИмяВременногоФайла);
		Иначе
			ФайлДляКопирования.Записать(ИмяВременногоФайла);
			Файл = Новый Файл(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	ФайлДляКопирования = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПредставлениеФайла) Тогда
		ПредставлениеФайла = Файл.Имя;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Представление", ПредставлениеФайла);
	ВозвращаемоеЗначение.Вставить("Расширение", Расширение);
	ВозвращаемоеЗначение.Вставить("Размер", РазмерДанных);
	ВозвращаемоеЗначение.Вставить("АдресВременногоФайла", ИмяВременногоФайла);
	ВозвращаемоеЗначение.Вставить("Ошибка", Ошибка);
	
	Возврат ВозвращаемоеЗначение;
#КонецЕсли

КонецФункции

// Возвращает пустую структуру, необходимую для записи в регистр сведений информации о мобильном клиенте.
// 
// Возвращаемое значение:
//  Структура - Структура - Пустая структура информации о мобильном клиенте.
//   * ИдентификаторПодписчикаУведомления 	- ИдентификаторПодписчикаДоставляемыхУведомлений;
//   * ДатаПоследнегоВхода 				  	- Дата - Дата последнего входа пользователя на МК;
//   * ОперативнаяПамять           		  	- Число - Размер оперативной памяти;
//   * ТипПлатформы               		  	- ТипПлатформы - Тип платформы, в рамках которой осуществляется работа;
//   * ИдентификаторКлиента        		  	- УникальныйИдентификатор - Уникальный идентификатор клиента.
//   * Пользователь               		  	- СправочникССылка - Пользователь МК.
//   * ВерсияПриложения               	  	- Строка - Содержит версию используемого 1С:Предприятия 8.
//   * ВерсияОС               			  	- Строка - Версия операционной системы.
//
Функция НовыйСведенияОМобильномКлиенте() Экспорт

	Результат = Новый Структура;
	
	// Структура с данными о мобильном клиенте.
	Результат.Вставить("ВерсияОС");
	Результат.Вставить("ВерсияПриложения");
	Результат.Вставить("Пользователь");
	Результат.Вставить("ИдентификаторКлиента");
	Результат.Вставить("ТипПлатформы");
	Результат.Вставить("ОперативнаяПамять");
	Результат.Вставить("ДатаПоследнегоВхода");
	Результат.Вставить("ИдентификаторПодписчикаУведомления");

	Возврат Результат;

КонецФункции

// Обработчик локальных и push-уведомлений.
//
// Параметры:
//  Уведомление  - ЛокальноеУведомление - Обрабатываемое локальное или push-уведомление;
//  Локальное    - Булево - признак того, что уведомление локальное, Ложь - push-уведомление;
//  Показано     - Булево - признак того, что уведомление показано;
//  ДопПараметры - Произвольный - дополнительные параметры обработчика.
//
Процедура Подключаемый_ОбработчикУведомлений(Уведомление, Локальное, Показано, ДопПараметры) Экспорт

#Если МобильныйКлиент Тогда	

	ОписаниеОбъекта = Уведомление.Данные;

	ЧтениеJS = Новый ЧтениеJSON;
	ЧтениеJS.УстановитьСтроку(ОписаниеОбъекта);
	ПолученныеДанные = ПрочитатьJSON(ЧтениеJS);
	
	Попытка
		
		Если ТипЗнч(ПолученныеДанные) = Тип("Массив") Тогда
			ТипОбъектаУведомления = ПолученныеДанные[0];
			ОбъектУведомления = МобильныйКлиентВызовСервера.СсылкаПоТипуИИД(ТипОбъектаУведомления, ПолученныеДанные[1]);
			ДатаСобытия = XMLЗначение(Тип("Дата"), ПолученныеДанные.Date);
		КонецЕсли;
		
	Исключение
		
		Если Не Показано Тогда
			МобильныйКлиентВызовСервера.ЗаписьЖурналаРегистрацииСервер(
				НСтр("ru = 'Ошибка в обработчике push на МК'") + ОписаниеОшибки());
		КонецЕсли;
		
	КонецПопытки;
	
	ОбработатьПоказУведомления(ТипОбъектаУведомления, ОбъектУведомления, Уведомление, ДатаСобытия);
	
#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения)
	
	ЗаголовокДиалога = НСтр("ru = 'Выберите файл'");
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = ЗаголовокДиалога;
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецФункции

// Показывает вопрос пользователю о показе уведомления
//
// Параметры:
//  ТипОбъектаУведомления - Строка - Тип уведомления;
//  ОбъектУведомления - Структура - Ссылка на объект уведомления;
//  Уведомление - ДоставляемоеУведомление - Данные уведомления;
//  ДатаСобытия - Дата - Дата отправки уведомления.
//
Процедура ОбработатьПоказУведомления(ТипОбъектаУведомления, ОбъектУведомления, Уведомление, ДатаСобытия)
	
	Если ОбъектУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		ДатаСобытия = ТекущаяДата();
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("ТипОбъектаУведомления", ТипОбъектаУведомления);
	ПараметрыОбработчика.Вставить("ОбъектУведомления", ОбъектУведомления);
	ПараметрыОбработчика.Вставить("Текст", Уведомление.Текст);
	ПараметрыОбработчика.Вставить("Дата", ДатаСобытия);
	
	ОбработкаРешения =
		Новый ОписаниеОповещения(
			"ОбработкаРешенияПоказатьОбъектУведомления", МобильныйКлиентНаКлиенте, ПараметрыОбработчика);
		
	ТекстВопроса = СтрШаблон(
		НСтр("ru = '%1
		|%2'"), Уведомление.Текст, 
		СформироватьТекстДатыУведомления(ДатаСобытия));
		
	КнопкиВыборка = Новый СписокЗначений();
	КнопкиВыборка.Добавить("Открыть" , НСтр("ru = 'Просмотреть'"));	
	КнопкиВыборка.Добавить("Закрыть" , НСтр("ru = 'Закрыть'"));
	
	ПоказатьВопрос(ОбработкаРешения, ТекстВопроса, КнопкиВыборка, , "Закрыть",);
	
КонецПроцедуры

// Обрабатывает решение пользователя об обработке уведомления
//
// Параметры:
//  Решение - Строка - Решение пользователя;
//  ДопПараметры - Структура - Доп параметры вызовы метода.
//
Процедура ОбработкаРешенияПоказатьОбъектУведомления(Решение, ДопПараметры) Экспорт
	
	ОбъектУведомления = ДопПараметры.ОбъектУведомления;

	Если Решение = "Открыть" Тогда
		ПоказатьЗначение(,ОбъектУведомления);
	КонецЕсли;

КонецПроцедуры

// Формирует представление даты начала события для уведомления.
//
// Параметры:
//  Дата - Дата - Дата начала события;
// 
// Возвращаемое значение:
//  Строка - Представление даты.
//
Функция СформироватьТекстДатыУведомления(Дата)

	Если НачалоДня(ТекущаяДата()) = НачалоДня(Дата) Тогда
		Представление = СтрШаблон(НСтр("ru = 'Сегодня в %1'"), Формат(Дата, "ДФ=HH:mm"));
		
	ИначеЕсли НачалоДня(ТекущаяДата())+86400 = НачалоДня(Дата) Тогда
		Представление = СтрШаблон(НСтр("ru = 'Завтра в %1'"), Формат(Дата, "ДФ=HH:mm"));
		
	Иначе
		Представление = СтрШаблон(НСтр("ru = '%1 в %2'"), Формат(Дата, "ДФ='dd MMMM'"), Формат(Дата, "ДФ=HH:mm"));
		
	КонецЕсли;

	Возврат Представление;

КонецФункции

#КонецОбласти

