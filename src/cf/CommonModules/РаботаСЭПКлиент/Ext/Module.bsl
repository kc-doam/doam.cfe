////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСЭлектроннымиПодписями

Процедура ПроверитьПодписиОбъекта(Форма, ВыделенныеСтроки = Неопределено, ОбработчикЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", Форма.УникальныйИдентификатор);
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Коллекция = ПолучитьМассивДанныхПодписей(Форма.ЭлектронныеПодписи);
	Иначе
		Коллекция = ВыделенныеСтроки;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Коллекция);
	
	КоллекцияОбъектов = Новый Массив;
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("Число") Тогда
			Данные = Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(ЭлементКоллекции);
		Иначе
			Данные = ЭлементКоллекции;
		КонецЕсли;
		Если КоллекцияОбъектов.Найти(Данные.Объект) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.УникальныйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияОбъектов.Добавить(Данные.Объект);
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("КоллекцияОбъектов", КоллекцияОбъектов);
	
	ДополнительныеПараметры.Вставить("ИндексОбъекта", -1);
	ПроверитьПодписиОбъектаЦиклОбъектовНачало(ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписиОбъекта.
Процедура ПроверитьПодписиОбъектаЦиклОбъектовНачало(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.КоллекцияОбъектов.Количество() <= ДополнительныеПараметры.ИндексОбъекта + 1 Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексОбъекта = ДополнительныеПараметры.ИндексОбъекта + 1;
	Элемент = ДополнительныеПараметры.КоллекцияОбъектов[ДополнительныеПараметры.ИндексОбъекта];
	
	КоллекцияПодписей = Новый Массив;
	Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("Число") Тогда
			Данные = ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(ЭлементКоллекции);
		Иначе
			Данные = ЭлементКоллекции;
		КонецЕсли;
		Если Данные.Объект <> Элемент Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияПодписей.Добавить(ЭлементКоллекции);
	КонецЦикла;
	ДополнительныеПараметры.Вставить("Коллекция", КоллекцияПодписей);
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		
		СтруктураВозврата = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(, Элемент);
		ДвоичныеДанные = СтруктураВозврата.ДвоичныеДанные;
		
		Если СтруктураВозврата.ДанныеФайла.Зашифрован Тогда
			
			Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
				Возврат;
			КонецЕсли;
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("ИдентификаторФормы",    ДополнительныеПараметры.Форма.УникальныйИдентификатор);
			ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'"));
			ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
			ОписаниеДанных.Вставить("Данные",                ДвоичныеДанные);
			ОписаниеДанных.Вставить("Представление",         СтруктураВозврата.ДанныеФайла.Ссылка);
			ОписаниеДанных.Вставить("СертификатыШифрования", СтруктураВозврата.ДанныеФайла.Ссылка);
			ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
			
			ОбработчикПродолжения = Новый ОписаниеОповещения("ПроверитьПодписиОбъектаПослеРасшифровкиФайла", ЭтотОбъект, ДополнительныеПараметры);
			
			МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
			МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Элемент) Тогда
		
		ДвоичныеДанные = Элемент;
		
	Иначе
		
		ДвоичныеДанные = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Элемент);
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Индекс", -1);
	
	ПроверитьПодписиОбъектаПослеПодготовкиДанных(ДвоичныеДанные, ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписиОбъекта.
Процедура ПроверитьПодписиОбъектаПослеРасшифровкиФайла(ОписаниеДанных, ДополнительныеПараметры) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПодписиОбъектаПослеПодготовкиДанных(ОписаниеДанных.РасшифрованныеДанные, ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписиОбъекта.
Процедура ПроверитьПодписиОбъектаПослеПодготовкиДанных(Данные, ДополнительныеПараметры)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	ПроверятьЭлектронныеПодписиНаСервере = МодульЭлектроннаяПодписьКлиент.ОбщиеНастройки(
		).ПроверятьЭлектронныеПодписиНаСервере;
	
	Если Не ПроверятьЭлектронныеПодписиНаСервере Тогда
		ДополнительныеПараметры.Вставить("Данные", Данные);
		ДополнительныеПараметры.Вставить("МодульЭлектроннаяПодписьКлиент", МодульЭлектроннаяПодписьКлиент);
		ДополнительныеПараметры.Вставить("Индекс", -1);
		
		ПроверитьПодписиОбъектаЦиклПодписейНачало(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДанныеСтрок = Новый Массив;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Данные) Тогда
		
		Для Каждого Элемент Из ДополнительныеПараметры.Коллекция Цикл
			СтрокаПодписи = ?(ТипЗнч(Элемент) <> Тип("Число"), Элемент,
				ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент));
			
			АдресДанных = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Данные, СтрокаПодписи.Версия);
			ДанныеСтрокНаИтерацию = Новый Массив;
			
			ДанныеСтроки = Новый Структура;
			// Данные для проверки 
			ДанныеСтроки.Вставить("АдресПодписи",        СтрокаПодписи.АдресПодписи);
			ДанныеСтроки.Вставить("Статус",              СтрокаПодписи.Статус);
			ДанныеСтроки.Вставить("ПодписьВерна",        СтрокаПодписи.ПодписьВерна);
			ДанныеСтроки.Вставить("ДатаПодписи",         СтрокаПодписи.ДатаПодписи);
			ДанныеСтроки.Вставить("ДатаПроверкиПодписи", СтрокаПодписи.ДатаПроверкиПодписи);
			ДанныеСтроки.Вставить("Версия",              СтрокаПодписи.Версия);
			
			//Данные для последующего занесения в регистр
			ДанныеСтроки.Вставить("УникальныйИдентификатор",        СтрокаПодписи.УникальныйИдентификатор);
			ДанныеСтроки.Вставить("Объект",                         СтрокаПодписи.Объект);
			ДанныеСтроки.Вставить("УстановившийПодпись",            СтрокаПодписи.УстановившийПодпись);
			ДанныеСтроки.Вставить("ТекстОшибкиПроверкиПодписи",     "");
			ДанныеСтроки.Вставить("СертификатДействителен",         Истина);
			ДанныеСтроки.Вставить("ТекстОшибкиПроверкиСертификата", "");
			
			ДанныеСтрокНаИтерацию.Добавить(ДанныеСтроки);
			
			ФайловыеФункцииСлужебныйВызовСервера.ПроверитьПодписи(АдресДанных, ДанныеСтрокНаИтерацию);
			
			// Если подпись не верна, то, возможно, нужно проверить дополнительные случаи
			Если Не ДанныеСтрокНаИтерацию[0].ПодписьВерна Тогда
				ВариантыДопПроверок = ПолучитьВариантыДополнительныхПроверок(
					ДанныеСтроки.Версия,
					Данные);
				
				Для Каждого ВариантДопПроверки Из ВариантыДопПроверок Цикл
					АдресДанных =
						РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(
							Данные,
							СтрокаПодписи.Версия,
							ВариантДопПроверки);
					
					ФайловыеФункцииСлужебныйВызовСервера.ПроверитьПодписи(
						АдресДанных,
						ДанныеСтрокНаИтерацию);
					
					Если ДанныеСтрокНаИтерацию[0].ПодписьВерна Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			ДанныеСтрок.Добавить(ДанныеСтрокНаИтерацию[0]);
			
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			АдресДанных = ПоместитьВоВременноеХранилище(Данные, ДополнительныеПараметры.ИдентификаторФормы);
		Иначе
			АдресДанных = Данные;
		КонецЕсли;
		
		Для Каждого Элемент Из ДополнительныеПараметры.Коллекция Цикл
			СтрокаПодписи = ?(ТипЗнч(Элемент) <> Тип("Число"), Элемент,
				ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент));
			
			ДанныеСтроки = Новый Структура;
			// Данные для проверки 
			ДанныеСтроки.Вставить("АдресПодписи",        СтрокаПодписи.АдресПодписи);
			ДанныеСтроки.Вставить("Статус",              СтрокаПодписи.Статус);
			ДанныеСтроки.Вставить("ПодписьВерна",        СтрокаПодписи.ПодписьВерна);
			ДанныеСтроки.Вставить("ДатаПодписи",         СтрокаПодписи.ДатаПодписи);
			ДанныеСтроки.Вставить("ДатаПроверкиПодписи", СтрокаПодписи.ДатаПроверкиПодписи);
			
			//Данные для последующего занесения в регистр
			ДанныеСтроки.Вставить("УникальныйИдентификатор",        СтрокаПодписи.УникальныйИдентификатор);
			ДанныеСтроки.Вставить("Объект",                         СтрокаПодписи.Объект);
			ДанныеСтроки.Вставить("УстановившийПодпись",            СтрокаПодписи.УстановившийПодпись);
			ДанныеСтроки.Вставить("ТекстОшибкиПроверкиПодписи",     "");
			ДанныеСтроки.Вставить("СертификатДействителен",         Истина);
			ДанныеСтроки.Вставить("ТекстОшибкиПроверкиСертификата", "");
			
			ДанныеСтрок.Добавить(ДанныеСтроки);
			
		КонецЦикла;
		
		ФайловыеФункцииСлужебныйВызовСервера.ПроверитьПодписи(АдресДанных, ДанныеСтрок);
		
	КонецЕсли;
	
	РаботаСЭП.ОбновитьСтатусыПроверкиПодписей(ДанныеСтрок);
	
	Индекс = 0;
	Для Каждого Элемент Из ДополнительныеПараметры.Коллекция Цикл
		СтрокаПодписи = ?(ТипЗнч(Элемент) <> Тип("Число"), Элемент,
			ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент));
		
		СтрокаПодписи.Статус  = ДанныеСтрок[Индекс].Статус;
		СтрокаПодписи.ПодписьВерна = ДанныеСтрок[Индекс].ПодписьВерна;
		СтрокаПодписи.ДатаПроверкиПодписи = ДанныеСтрок[Индекс].ДатаПроверкиПодписи;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПроверитьПодписиОбъектаЦиклОбъектовНачало(ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписиОбъекта.
Процедура ПроверитьПодписиОбъектаЦиклПодписейНачало(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Коллекция.Количество() <= ДополнительныеПараметры.Индекс + 1 Тогда
		ПроверитьПодписиОбъектаЦиклОбъектовНачало(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Индекс = ДополнительныеПараметры.Индекс + 1;
	Элемент = ДополнительныеПараметры.Коллекция[ДополнительныеПараметры.Индекс];
	
	ДополнительныеПараметры.Вставить("СтрокаПодписи", ?(ТипЗнч(Элемент) <> Тип("Число"), Элемент,
		ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент)));
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ДополнительныеПараметры.Данные) Тогда
		
		ДополнительныеПараметрыПроверки = Новый Структура;
		Если ДополнительныеПараметры.Свойство("РеквизитОрганизацияНеЗаполнен") Тогда
			ДополнительныеПараметрыПроверки.Вставить("РеквизитОрганизацияНеЗаполнен", 
				ДополнительныеПараметры.РеквизитОрганизацияНеЗаполнен);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ИсключаемыеКлючевыеРеквизиты") Тогда
			ДополнительныеПараметрыПроверки.Вставить("ИсключаемыеКлючевыеРеквизиты",
				ДополнительныеПараметры.ИсключаемыеКлючевыеРеквизиты);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОсобыеДанныеПодписания") Тогда
			ДополнительныеПараметрыПроверки.Вставить("ОсобыеДанныеПодписания",
				ДополнительныеПараметры.ОсобыеДанныеПодписания);
		КонецЕсли;
		
		ПроверяемыеДанные = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(
			ДополнительныеПараметры.Данные, ДополнительныеПараметры.СтрокаПодписи.Версия,
			ДополнительныеПараметрыПроверки);
		
	Иначе
		ПроверяемыеДанные = ДополнительныеПараметры.Данные;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		Новый ОписаниеОповещения("ПроверитьПодписиОбъектаПослеПроверкиСтроки", ЭтотОбъект, ДополнительныеПараметры),
		ПроверяемыеДанные,
		ДополнительныеПараметры.СтрокаПодписи.АдресПодписи);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписиОбъекта.
Процедура ПроверитьПодписиОбъектаПослеПроверкиСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаПодписи = ДополнительныеПараметры.СтрокаПодписи;
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СтрокаПодписи.ПодписьВерна = Результат;
		СтрокаПодписи.СертификатДействителен = Результат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ТекстОшибкиПроверкиПодписи") 
			И ПройтиДополнительныеПроверки(ДополнительныеПараметры) Тогда
			
			Возврат;
		КонецЕсли;
		
		СтрокаПодписи.ПодписьВерна = Не Результат.Свойство("ТекстОшибкиПроверкиПодписи");
		СтрокаПодписи.СертификатДействителен = Не Результат.Свойство("ТекстОшибкиПроверкиСертификата");
	КонецЕсли;
	ДанныеПодписи = Новый Структура(
		"УникальныйИдентификатор,
		|Объект,
		|УстановившийПодпись,
		|ДатаПодписи,
		|ПодписьВерна,
		|ТекстОшибкиПроверкиПодписи,
		|СертификатДействителен,
		|ТекстОшибкиПроверкиСертификата");
	ЗаполнитьЗначенияСвойств(ДанныеПодписи, СтрокаПодписи);
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ТекстОшибкиПроверкиПодписи") Тогда
		ДанныеПодписи.ТекстОшибкиПроверкиПодписи = Результат.ТекстОшибкиПроверкиПодписи;
	Иначе
		ДанныеПодписи.ТекстОшибкиПроверкиПодписи = "";
	КонецЕсли;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
		ДанныеПодписи.ТекстОшибкиПроверкиСертификата = Результат.ТекстОшибкиПроверкиСертификата;
	Иначе
		ДанныеПодписи.ТекстОшибкиПроверкиСертификата = "";
	КонецЕсли;
	РаботаСЭП.ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, СтрокаПодписи.ДатаПроверкиПодписи, СтрокаПодписи.Статус);
	
	ПроверитьПодписиОбъектаЦиклПодписейНачало(ДополнительныеПараметры);
	
КонецПроцедуры

// Открывает форму просмотра ЭП.
//
Процедура ОткрытьПодпись(ТекущиеДанные, УникальныйИдентификатор) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) И 
		ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаПодписи", ТекущиеДанные.ДатаПодписи);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Объект);
		ПараметрыФормы.Вставить("УстановившийПодпись", ТекущиеДанные.УстановившийПодпись);
		ПараметрыФормы.Вставить("УникальныйИдентификатор", ТекущиеДанные.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("ПодписьПроверена", ЗначениеЗаполнено(ТекущиеДанные.ДатаПроверкиПодписи));
		ПараметрыФормы.Вставить("ПодписьВерна", ТекущиеДанные.ПодписьВерна);
		ПараметрыФормы.Вставить("СертификатДействителен", ТекущиеДанные.СертификатДействителен);
		Попытка
			ОткрытьФорму("РегистрСведений.ЭлектронныеПодписи.ФормаЗаписи", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);
		КонецПопытки;
		
	Иначе
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементДерева") Тогда
			ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
			Если ДочерниеЭлементы.Количество() > 0 Тогда
				Версия = ДочерниеЭлементы[0].Объект;
				Если ЗначениеЗаполнено(Версия) И ТипЗнч(Версия) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					ФайлСсылка = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Версия, "Владелец");
					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
						ФайлСсылка,
						Неопределено,
						УникальныйИдентификатор);
					РаботаСФайламиКлиент.Открыть(ДанныеФайла, УникальныйИдентификатор); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Подписать(Данные, ИдентификаторФормы, ОбработчикЗавершения, Заголовки = Неопределено, ДоступныеСертификаты = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		МассивОбъектов = Данные;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Данные);
	КонецЕсли;
	
	НаборДанных = Новый Массив;
	МассивДанныхОбъектов = Новый Массив;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("МассивДанныхОбъектов", МассивДанныхОбъектов);
	
	СписокПредставлений = Новый СписокЗначений;
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		ПараметрыДанных = Неопределено;
		
		Если ТипЗнч(Объект) = Тип("Структура")
			И Объект.Свойство("ОбъектПодписания") Тогда
			
			ОбъектПодписания = Объект.ОбъектПодписания;
			
			Если Объект.Свойство("ПараметрыДанных") Тогда
				ПараметрыДанных = Объект.ПараметрыДанных;
			КонецЕсли;
			
		Иначе
			ОбъектПодписания = Объект;
		КонецЕсли;
		
		// У документов сперва подписываем не помеченные на удаление файлы.
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектПодписания) Тогда
			
			МассивПодчиненныхФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектПодписания, Ложь);
			
			Для Каждого Файл Из МассивПодчиненныхФайлов Цикл
				
				МассивДанныхОбъектов.Добавить(Файл);
				
				ТекущиеПараметрыВыполнения = Новый Структура;
				ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
				ТекущиеПараметрыВыполнения.Вставить("ПодписываемыеДанные", Файл);
				
				ПараметрыДанныхФайла = Новый Структура;
				ПараметрыДанныхФайла.Вставить("ЗаполнятьПодписанта", Ложь);
				ПараметрыДанныхФайла.Вставить("ДанныеИзменены", Ложь);
				
				Если ПараметрыДанных <> Неопределено
					И ПараметрыДанных.Свойство("ЗаполнятьПодписантаВФайле")
					И ПараметрыДанных.ЗаполнятьПодписантаВФайле = Истина Тогда
					
					ПараметрыДанныхФайла.ЗаполнятьПодписанта = Истина;
					
				КонецЕсли;
				
				ТекущиеПараметрыВыполнения.Вставить("ПараметрыДанных", ПараметрыДанныхФайла);
				
				ЭлементДанных = Новый Структура;
				ЭлементДанных.Вставить("Представление", Файл);
				ЭлементДанных.Вставить("Данные",
					Новый ОписаниеОповещения("ПриЗапросеДвоичныхДанныхОбъекта", ЭтотОбъект, ТекущиеПараметрыВыполнения));
				ЭлементДанных.Вставить("Объект",
					Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект, ТекущиеПараметрыВыполнения));
				НаборДанных.Добавить(ЭлементДанных);
				
				СписокПредставлений.Добавить(Файл,
					СтрШаблон(НСтр("ru = 'Файл: %1'"), Файл));
				
			КонецЦикла;
			
		КонецЕсли;
		
		МассивДанныхОбъектов.Добавить(ОбъектПодписания);
		
		ТекущиеПараметрыВыполнения = Новый Структура;
		ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
		ТекущиеПараметрыВыполнения.Вставить("ПодписываемыеДанные", ОбъектПодписания);
		
		Если ПараметрыДанных <> Неопределено Тогда
			ТекущиеПараметрыВыполнения.Вставить("ПараметрыДанных", ПараметрыДанных);
		КонецЕсли;
		
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("Представление", ОбъектПодписания);
		ЭлементДанных.Вставить("Данные",
			Новый ОписаниеОповещения("ПриЗапросеДвоичныхДанныхОбъекта", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		ЭлементДанных.Вставить("Объект",
			Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		НаборДанных.Добавить(ЭлементДанных);
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектПодписания) Тогда
			СписокПредставлений.Добавить(ОбъектПодписания, Строка(ОбъектПодписания));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Заголовки)
		Или ТипЗнч(Заголовки) <> Тип("Структура") Тогда
		
		Заголовки = Новый Структура;
	КонецЕсли;
	
	Если Заголовки.Свойство("Операция") Тогда
		Операция = Заголовки.Операция;
	Иначе
		Операция = НСтр("ru = 'Подписание'");
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Данные) Тогда
			Операция = НСтр("ru = 'Подписание документа'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВизаСогласования(Данные) Тогда
			Операция = НСтр("ru = 'Подписание визы согласования'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоРезолюция(Данные) Тогда
			Операция = НСтр("ru = 'Подписание резолюции'");
		КонецЕсли;
	КонецЕсли;
	
	Если Заголовки.Свойство("ЗаголовокДанных") Тогда
		ЗаголовокДанных = Заголовки.ЗаголовокДанных;
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Объект'");
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Данные) Тогда
			ЗаголовокДанных = НСтр("ru = 'Документ'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВизаСогласования(Данные) Тогда
			ЗаголовокДанных = НСтр("ru = 'Виза согласования'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоРезолюция(Данные) Тогда
			ЗаголовокДанных = НСтр("ru = 'Резолюция'");
		КонецЕсли;
	КонецЕсли;
	
	Если Заголовки.Свойство("ЗаголовокДанных") Тогда
		ПредставлениеНабора = Заголовки.ЗаголовокДанных;
	Иначе
		ПредставлениеНабора = НСтр("ru = 'Объекты (%1)'");
		// Выводим название документа, так как при подписании документа будут также подписаны его файлы.
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Данные) Тогда
			ПредставлениеНабора = Строка(Данные);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("ИдентификаторФормы",  ИдентификаторФормы);
	ОписаниеДанных.Вставить("Операция",            Операция);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеНабора);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов", ДоступныеСертификаты);
	КонецЕсли;
	Если СписокПредставлений.Количество() > 0 Тогда
		ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеПодписанияОбъектов", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьОбъект.
// Вызывается из подсистемы ЭлектроннаяПодпись при запросе данных для подписания.
//
Процедура ПриЗапросеДвоичныхДанныхОбъекта(Параметры, Контекст) Экспорт
	
	РезультатПолученияДанных = Новый Структура;
	РезультатПолученияДанных.Вставить("Данные", Неопределено);
	РезультатПолученияДанных.Вставить("ДанныеИзменены", Ложь);
	РезультатПолученияДанных.Вставить("ПричинаИзмененияДанных", "");
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(Контекст.ПодписываемыеДанные) Тогда
		
		ЗаполнятьПодписанта = Ложь;
		
		Если Контекст.Свойство("ПараметрыДанных") Тогда
			ДополнительныеПараметры = Контекст.ПараметрыДанных;
			
			Если ДополнительныеПараметры.Свойство("ЗаполнятьПодписанта")
				И ДополнительныеПараметры.ЗаполнятьПодписанта = Истина Тогда
				
				ЗаполнятьПодписанта = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнятьПодписанта Тогда
			ДанныеФайлаСПодписантом =
				ОбменСКонтрагентамиДОВызовСервера.ПолучитьДанныеФайлаСЗаполненнымПодписантом(
					Контекст.ПодписываемыеДанные, Параметры.ОписаниеДанных.ВыбранныйСертификат.Отпечаток);
			
			РезультатПолученияДанных.Данные = ДанныеФайлаСПодписантом.ДвоичныеДанные;
			РезультатПолученияДанных.ДанныеИзменены = ДанныеФайлаСПодписантом.ДанныеИзменены;
			РезультатПолученияДанных.ПричинаИзмененияДанных =
				НСтр("ru = 'Заполнен подписант файла из сертификата.'");
			
		Иначе
			РезультатПолученияДанных.Данные =
				РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(
					Контекст.ПодписываемыеДанные).ДвоичныеДанные;
		КонецЕсли;
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		
		Если Контекст.Свойство("ПараметрыДанных") Тогда
			ДополнительныеПараметры = Контекст.ПараметрыДанных;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ЗаполнятьПодписантаВФайле")
			И ДополнительныеПараметры.ЗаполнятьПодписантаВФайле = Истина Тогда
			
			ДополнительныеПараметры.Вставить("Отпечаток", Параметры.ОписаниеДанных.ВыбранныйСертификат.Отпечаток);
		КонецЕсли;
		
		РезультатПолученияДанных.Данные =
			РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Контекст.ПодписываемыеДанные,,
				ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если Контекст.Свойство("ПараметрыДанных") Тогда
		ДополнительныеПараметры = Контекст.ПараметрыДанных;
		
		Если РезультатПолученияДанных.ДанныеИзменены Тогда
			ДополнительныеПараметры.Вставить("ДанныеИзменены", Истина);
			ДополнительныеПараметры.Вставить("ИзмененныеДанные",
				РезультатПолученияДанных.Данные);
			ДополнительныеПараметры.Вставить("ПричинаИзмененияДанных",
				РезультатПолученияДанных.ПричинаИзмененияДанных);
			
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, РезультатПолученияДанных);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьОбъект.
// Вызывается из подсистемы ЭлектроннаяПодпись после подписания данных для нестандартного
// способа добавления подписи в объект.
//
Процедура ПриПолученииПодписи(Параметры, Контекст) Экспорт
	
	Если Контекст.Свойство("ПараметрыДанных")
		И Контекст.ПараметрыДанных.Свойство("ДанныеПодписанта") Тогда
		
		СвойстваПодписи = Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.СвойстваПодписи;
		
		// Если контекст недоступен на клиенте и подписание выполнялось на сервере,
		// то СвойстваПодписи - Адрес временного хранилища, содержащего свойства подписи
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ДанныеПодписанта = Контекст.ПараметрыДанных.ДанныеПодписанта;
		
		СвойстваПодписи.ДатаПодписи = ДанныеПодписанта.ДатаПодписи;
		СвойстваПодписи.УстановившийПодпись = ДанныеПодписанта.Подписал;
		
	КонецЕсли;
	
	Если Контекст.Свойство("ПараметрыДанных")
		И Контекст.ПараметрыДанных.Свойство("ЗаполнятьПодписанта")
		И Контекст.ПараметрыДанных.Свойство("ДанныеИзменены") Тогда
		
		СвойстваПодписи = Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.СвойстваПодписи;
		
		// Если контекст недоступен на клиенте и подписание выполнялось на сервере,
		// то СвойстваПодписи - Адрес временного хранилища, содержащего свойства подписи
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ПараметрыДанных = Контекст.ПараметрыДанных;
		
		Если ПараметрыДанных.ЗаполнятьПодписанта = Истина
			И ПараметрыДанных.ДанныеИзменены = Истина Тогда
			
			СвойстваПодписи.Вставить("ДанныеИзменены", Истина);
			СвойстваПодписи.Вставить("ИзмененныеДанные", ПараметрыДанных.ИзмененныеДанные);
			СвойстваПодписи.Вставить("ПричинаИзмененияДанных", ПараметрыДанных.ПричинаИзмененияДанных);
			
			Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.СвойстваПодписи =
				ПоместитьВоВременноеХранилище(СвойстваПодписи, Новый УникальныйИдентификатор());
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура);
	
КонецПроцедуры

// Завершение процедуры ПодписатьОбъект.
Процедура ПослеПодписанияОбъектов(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикЗавершения, ОписаниеДанных);
	
КонецПроцедуры

Процедура ПослеПодписанияОбъекта(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
		
	ПодписанныеДанные = Новый Массив;
	Для Каждого Данные Из ОписаниеДанных.НаборДанных Цикл
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Возврат;
		КонецЕсли;
		Элемент = Новый Структура;
		Элемент.Вставить("ПодписанныйОбъект", Данные.Представление);
		Элемент.Вставить("СвойстваПодписи", Данные.СвойстваПодписи);
		Элемент.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ПодписанныеДанные.Добавить(Элемент);
	КонецЦикла;
	
	РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписанныеДанные, ОписаниеДанных.ИдентификаторФормы);
	ИнформироватьОПодписании(ОписаниеДанных.НаборДанных, ПараметрыВыполнения.Объект);
	
КонецПроцедуры

// По окончании подписания нотифицирует.
//
Процедура ИнформироватьОПодписании(ПодписанныеДанные, Объект) Экспорт
	
	Для Каждого Данные Из ПодписанныеДанные Цикл
		ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Данные.Представление);
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		Объект);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Преобразует 2-уровневое дерево в массив.
//
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

// Выбирает из 2-уровнего дерава ЭП строки к проверке,
//  помещает их в параметр СтрокиКПроверке, в параметр УИДПодписейКПроверке заносит их УИД
//
// Параметры:
//  ДеревоПодписей  - ДанныеФормыДерево - Дерево ЭП объекта. 1-й уровень - объект подписи,
//                            2-й уровень - подписи объекта
//  ВыделенныеСтроки - Массив из Число, Неопределено - Массив уникальных идентификаторов выделенных строк дерева.
//                            Если заполнен, то для проверки будут выбранны только выбранные строки или подчиненные им.
//  СтрокиКПроверке  - Массив из ДанныеФормыЭлементДерева - Массив строк дерева подписей,
//                            по выполнению процедуры будет заполнен строками, содержащие данные подписей.
//                            Если указан параметр ВыделенныеСтроки, то будут добавлены только те строки,
//                            которые либо выделенных строках, либо подчинены им.
//  УИДПодписейКПроверке  - Массив из УникальныйИдентификатор - Массив УИД подписей для проверки,
//                            по выполнению процедуры будет заполнен УИД подписей, отобранных для проверки.
//                            Если указан параметр ВыделенныеСтроки, то будут добавлены только те подписи,
//                            которые либо в выделенных строках, либо подчинены им.
//
Процедура ЗаполнитьСтрокиПодписейДляПроверки(ДеревоПодписей, ВыделенныеСтроки = Неопределено,
		СтрокиКПроверке, УИДПодписейКПроверке) Экспорт
	
	Для Каждого СтрокаОбъекта Из ДеревоПодписей.ПолучитьЭлементы() Цикл
		
		Если ВыделенныеСтроки = Неопределено Тогда
			ВыбиратьДочерние = Истина;
		Иначе
			ВыбиратьДочерние =
				ВыделенныеСтроки.Найти(СтрокаОбъекта.ПолучитьИдентификатор()) <> Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаПодписи Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
			
			Если (Не ВыделенныеСтроки = Неопределено)
				И (Не ВыбиратьДочерние) 
				И (ВыделенныеСтроки.Найти(СтрокаПодписи.ПолучитьИдентификатор()) = Неопределено) Тогда
				
				Продолжить;
			КонецЕсли;
			
			СтрокиКПроверке.Добавить(СтрокаПодписи);
			УИДПодписейКПроверке.Добавить(СтрокаПодписи.УникальныйИдентификатор);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтрокиПодписейДляПроверки()

// Обрабатывает результат проверки подписей
//
// Параметры:
//  ДеревоПодписей  - ДанныеФормыДерево - Дерево ЭП объекта. 1-й уровень - объект подписи,
//                            2-й уровень - подписи объекта
//  УИДПодписей  - Массив из УникальныйИдентификатор - Массив УИД подписей отобранных для проверки.
//  ИдентификаторФормы  - УникальныйИдентификатор - Уникальный идентификатор формы,
//                                                       для открытия карточки подписи.
//
Процедура ОбработатьПроверкуПодписей(ДеревоПодписей, УИДПодписей, ИдентификаторФормы) Экспорт
	
	Если УИДПодписей.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли УИДПодписей.Количество() = 1 Тогда
		
		Для Каждого СтрокаОбъекта Из ДеревоПодписей.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаПодписи Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				Если СтрокаПодписи.УникальныйИдентификатор = УИДПодписей[0] Тогда
					РаботаСЭПКлиент.ОткрытьПодпись(СтрокаПодписи, ИдентификаторФормы);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//Если попали сюда, значит не нашли строку в цикле, сообщим, что подпись не найдена.
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Проверяемая подпись не найдена в списке установленных. Повторите проверку.'"), ,
			НСтр("ru = 'Ошибка проверки подписи'"));
		
	Иначе
		
		ВсегоПодписей = УИДПодписей.Количество();
		Действительных = 0;
		Недействительных = 0;
		
		Для Каждого СтрокаОбъекта Из ДеревоПодписей.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаПодписи Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				Если УИДПодписей.Найти(СтрокаПодписи.УникальныйИдентификатор) <> Неопределено Тогда
					Если СтрокаПодписи.ПодписьВерна Тогда
						Действительных = Действительных + 1;
					Иначе
						Недействительных = Недействительных + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Ненайденных = ВсегоПодписей - Действительных - Недействительных;
		
		Если ВсегоПодписей = Действительных Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1, все подписи действительны.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					ВсегоПодписей));
		ИначеЕсли ВсегоПодписей = Недействительных Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1. Подписи недействительны.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					ВсегоПодписей));
		ИначеЕсли ВсегоПодписей = Ненайденных Тогда
			ТекстСообщения = 
				НСтр("ru = 'Проверяемые подписи не найдены в списке установленных. Повторите проверку.'");
		ИначеЕсли Ненайденных = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1. %2, %3.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					ВсегоПодписей),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись действительна;;%1 подписи действительны;%1 подписей действительно;%1 подписей действительно'"),
					Действительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 - недействительна;;%1 - недействительны;%1 - недействительно;%1 - недействительно'"),
					Недействительных));
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1. %2, %3.'")
					+ Символы.ПС
					+ НСтр("ru = '%4 в списке установленных подписей. Повторите проверку.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					Действительных + Недействительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись действительна;;%1 подписи действительны;%1 подписей действительно;%1 подписей действительно'"),
					Действительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 - недействительна;;%1 - недействительны;%1 - недействительно;%1 - недействительно'"),
					Недействительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись не найдена;;%1 подписи не найдены;%1 подписей не найдено;%1 подписей не найдено'"),
					Ненайденных));
		КонецЕсли;
		
		ПоказатьПредупреждение( , ТекстСообщения, , НСтр("ru = 'Результат проверки подписей'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПроверкуСтрок()

#КонецОбласти

#Область РаботаСФайлами

// Есть ли шифрованные файлы среди выделенных.
//
Функция ЕстьШифрованныеФайлы(ВыделенныеСтроки, ТаблицаПодписей) Экспорт
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			Если ДанныеСтроки.Зашифрован Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет есть ли шифрованные файлы.
//
Функция ЕстьШифрованныеФайлыСредиВсехПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = ПолучитьМассивДанныхПодписей(ТаблицаПодписей);
	Для Каждого Строка Из ДанныеСтрок Цикл
		Если Строка.Зашифрован Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Показывает текст и вызывает обработчик с заданным результатом.
//
Процедура ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Результат) Экспорт
	Если ТипЗнч(ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыОбработчика.Вставить("Результат",             Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьПредупреждение(Обработчик, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры ВернутьРезультатПослеПоказаПредупреждения.
//
Процедура ВернутьРезультатПослеЗакрытияПростогоДиалога(Структура) Экспорт
	ВыполнитьОбработкуОповещения(Структура.ОбработчикРезультата, Структура.Результат);
КонецПроцедуры

// Показывает стандартное предупреждение.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПредставлениеКоманды - Строка - Необязательный. Имя команды, для выполнения которой необходимо расширение.
//
Процедура ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
	ОбработчикРезультата = Неопределено, ПредставлениеКоманды = "") Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Для выполнения команды ""%1"" необходимо
	                                 |установить расширение работы с криптографией.'");
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПредставлениеКоманды);
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, " ""%1""", "");
	КонецЕсли;
	ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Неопределено);
	
КонецПроцедуры

// Выполняет дополнительные проверки подписей, если это необходимо
//
// Параметры:
//	ДополнительныеПараметры - Структура - Параметры проверки подписей
//		* Форма - ФормаКлиентскогоПриложения - Форма в которой происходит проверка подписей
//		* ОбработчикЗавершения - ОписаниеОповещения - Обработчик завершения проверки
//		* ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы проверки
//		* ВыделенныеСтроки - Массив - Массив строк управляемой формы для проверки подписей
//		* КоллекцияОбъектов - Массив - Массив ссылок на подписанные объекты
//		* ИндексОбъекта - Число - Индекс текущего объекта в коллекции объектов
//		* Данные - ОпределяемыйТип.ПодписанныйОбъект - Подписанный объект
// 
// Возвращаемое значение:
//	Булево - Истина, если выполнена дополнительная проверка, Ложь - если нет.
Функция ПройтиДополнительныеПроверки(ДополнительныеПараметры)
	
	//Если св-ва нет, то мы доп проверки не проходили, нужно заполнить их
	Если Не ДополнительныеПараметры.Свойство("ПараметрыДополнительныхПроверок") Тогда
		
		ПараметрыДополнительныхПроверок = Новый Структура;
		
		ВариантыДополнительныхПроверок = ПолучитьВариантыДополнительныхПроверок(
			ДополнительныеПараметры.СтрокаПодписи.Версия,
			ДополнительныеПараметры.Данные);
		
		ПараметрыДополнительныхПроверок.Вставить(
			"ВариантыДополнительныхПроверок", ВариантыДополнительныхПроверок);
		ПараметрыДополнительныхПроверок.Вставить("Индекс", -1);
		
		ДополнительныеПараметры.Вставить(
			"ПараметрыДополнительныхПроверок", ПараметрыДополнительныхПроверок);
		
	КонецЕсли;
	
	ПараметрыДополнительныхПроверок = ДополнительныеПараметры.ПараметрыДополнительныхПроверок;
	
	ИндексТекущегоВарианта = ПараметрыДополнительныхПроверок.Индекс;
	КоличествоВаринатов = ПараметрыДополнительныхПроверок.ВариантыДополнительныхПроверок.Количество();
	
	Если ИндексТекущегоВарианта < КоличествоВаринатов - 1 Тогда
		
		ПараметрыДополнительныхПроверок.Индекс =
			ПараметрыДополнительныхПроверок.Индекс + 1;
		
		ПараметрыДополнительнойПроверки =
			ПараметрыДополнительныхПроверок.ВариантыДополнительныхПроверок[ПараметрыДополнительныхПроверок.Индекс];
		
		Для Каждого Элемент Из ПараметрыДополнительнойПроверки Цикл
			
			ДополнительныеПараметры.Вставить(
				Элемент.Ключ,
				Элемент.Значение);
			
		КонецЦикла;
		
		ДополнительныеПараметры.Индекс = ДополнительныеПараметры.Индекс - 1;
		ПроверитьПодписиОбъектаЦиклПодписейНачало(ДополнительныеПараметры);
		Возврат Истина;
		
	Иначе
		
		Если КоличествоВаринатов > 0 Тогда
			ПараметрыДополнительнойПроверки =
				ПараметрыДополнительныхПроверок.ВариантыДополнительныхПроверок[ПараметрыДополнительныхПроверок.Индекс];
			
			Для Каждого Элемент Из ПараметрыДополнительнойПроверки Цикл
				
				ДополнительныеПараметры.Удалить(Элемент.Ключ);
				
			КонецЦикла;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив структур с вариантами параметров дополнительных проверок
//
// Параметры:
//	Версия - Число - Номер версии установленной подписи
//	Объект - ОпределяемыйТип.ПодписанныйОбъект - Объект, подпись которого проверяется
// 
// Возвращаемое значение:
//	Массив - Массив структур с вариантами дополнительных проверок
Функция ПолучитьВариантыДополнительныхПроверок(Версия, Объект)
	
	// Структура возможных вариантов параметров для дополнительных проверок
	// Ключ - имя параметра, Значение - Массив возможных значений параметра
	ВозможныеВариантыПроверок = Новый Структура;
	
	ИменаПараметров = Новый Массив;
	
	// Повторная проверка подписи для случаев, когда подпись была
	// создана до включения учета по организациям.
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) И Версия > 1 Тогда
		
		ВозможныеЗначенияПараметра = Новый Массив;
		
		ВозможныеЗначенияПараметра.Добавить(Ложь);
		ВозможныеЗначенияПараметра.Добавить(Истина);
		
		ИмяПараметра = "РеквизитОрганизацияНеЗаполнен";
		
		ВозможныеВариантыПроверок.Вставить(ИмяПараметра, ВозможныеЗначенияПараметра);
		
		ИменаПараметров.Добавить(ИмяПараметра);
	КонецЕсли;
	
	// Повторная проверка внутренних документов для версии подписи 3.
	Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Объект) И Версия = 3 Тогда
		
		ИсклКлючРеквизиты_2_1_7 = Новый Массив;
		ИсклКлючРеквизиты_2_1_7.Добавить("Стороны.Подписал");
		ИсклКлючРеквизиты_2_1_7.Добавить("Стороны.ДатаПодписи");
		ИсклКлючРеквизиты_2_1_7.Добавить("Стороны.Сторона");
		ИсклКлючРеквизиты = Новый Массив;
		ИсклКлючРеквизиты.Добавить("Стороны.Подписал");
		ИсклКлючРеквизиты.Добавить("Стороны.ДатаПодписи");
		
		ВозможныеЗначенияПараметра = Новый Массив;
		ВозможныеЗначенияПараметра.Добавить(Новый Массив);
		ВозможныеЗначенияПараметра.Добавить(ИсклКлючРеквизиты);
		ВозможныеЗначенияПараметра.Добавить(ИсклКлючРеквизиты_2_1_7);
		
		ИмяПараметра = "ИсключаемыеКлючевыеРеквизиты";
		
		ВозможныеВариантыПроверок.Вставить(ИмяПараметра, ВозможныеЗначенияПараметра);
		
		ИменаПараметров.Добавить(ИмяПараметра);
	КонецЕсли;
	
	// Повторная проверка 5-й версии подписи для внутренних документов, отправленных по ЭДО.
	Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Объект)
		И Версия = 5 Тогда
		
		ДанныеСостояния = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(Объект);
		
		// Если это исходящий документ и обмен завершен, то при подписании в таблице сторон со стороны контрагента
		// не было данных о подписании. Это необходимо указать в доп проверках
		Если ДанныеСостояния.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий")
			И ДанныеСостояния.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭДОДокументооборот.ОбменЗавершен") Тогда
			
			ДанныеПодписанияКонтрагентаДоОбмена = Новый Структура;
			ДанныеПодписанияКонтрагентаДоОбмена.Вставить("НомерСтроки", 1);
			ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписал",
				ПредопределенноеЗначение("Справочник.КонтактныеЛица.ПустаяСсылка"));
			ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписан", Ложь);
			ДанныеПодписанияКонтрагентаДоОбмена.Вставить("ДатаПодписи", Дата(1, 1, 1));
			
			ВозможныеЗначенияПараметра = Новый Массив;
			ВозможныеЗначенияПараметра.Добавить(Новый Массив);
			ВозможныеЗначенияПараметра.Добавить(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписанияКонтрагентаДоОбмена));
			
			ИмяПараметра = "ОсобыеДанныеПодписания";
			
			ВозможныеВариантыПроверок.Вставить(ИмяПараметра, ВозможныеЗначенияПараметра);
			
			ИменаПараметров.Добавить(ИмяПараметра);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Структура для перебора всех возможных значений параметров для дополнительных проверок
	// Ключ - имя параметра,
	// Значение - индекс текущего значения параметра в массиве возможных значений из структуры
	НомераЗначенийПараметров = Новый Структура;
	Для Каждого Элемент Из ВозможныеВариантыПроверок Цикл
		НомераЗначенийПараметров.Вставить(Элемент.Ключ, 0);
	КонецЦикла;
	
	// Не проверяем вариант со значениями параметров под индексом 0,
	// т.к. все нулевые параметры - это стандартная проверка.
	
	// Массив в который будем добавлять возможные структуры параметров для допонительных проверок
	ВариантыДополнительныхПроверок = Новый Массив;
	
	ВсеВариантыПеребраны = Ложь;
	
	Пока Не ВсеВариантыПеребраны Цикл
		
		// Перебираем все возможные значения параметров проверок
		
		НомерПараметра = 0;
		
		Пока НомерПараметра < НомераЗначенийПараметров.Количество() Цикл
			
			ИмяПараметра = ИменаПараметров[НомерПараметра];
			КоличествоЗначенийПараметра = ВозможныеВариантыПроверок[ИмяПараметра].Количество();
			
			// Если для текущего параметра мы перебрали не все значения, то выбираем следующее,
			// а у предыдущих параметров сбрасываем значения на 0.
			Если НомераЗначенийПараметров[ИмяПараметра] < КоличествоЗначенийПараметра - 1 Тогда
				
				НомераЗначенийПараметров[ИмяПараметра] =
					НомераЗначенийПараметров[ИмяПараметра] + 1;
				
				Для Инд = 0 По НомерПараметра - 1 Цикл
					НомераЗначенийПараметров[ИменаПараметров[Инд]] = 0;
				КонецЦикла;
				
				Прервать;
				
			// Если для текущего параметра мы все перебрали - переходим к следующему
			Иначе
				
				НомерПараметра = НомерПараметра + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если номер текущего параметра оказался больше общего количества параметров,
		// значит мы все перебрали.
		Если НомерПараметра >= НомераЗначенийПараметров.Количество() Тогда
			
			ВсеВариантыПеребраны = Истина;
			
		// Если нет - нужно добавить набор параметров в возможные варианты проверок.
		Иначе
			
			ВариантПроверки = Новый Структура;
			
			Для Каждого Элемент Из ВозможныеВариантыПроверок Цикл
				
				ВариантПроверки.Вставить(
					Элемент.Ключ,
					Элемент.Значение[НомераЗначенийПараметров[Элемент.Ключ]]);
			
			КонецЦикла;
			
			ВариантыДополнительныхПроверок.Добавить(ВариантПроверки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВариантыДополнительныхПроверок;
	
КонецФункции


#КонецОбласти
