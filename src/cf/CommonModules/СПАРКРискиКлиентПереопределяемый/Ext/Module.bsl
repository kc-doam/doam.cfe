///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРК".
// ОбщийМодуль.СПАРКРискиКлиентПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события "ОбработкаНавигационнойСсылки" любой формы.
//
// Параметры:
//  Форма                           - ФормаКлиентскогоПриложения - форма, в которой инициировано событие;
//  ЭлементФормы                    - ПолеФормы - элемент формы, в котором инициировано событие;
//  НавигационнаяСсылка             - Строка - навигационная ссылка;
//  СтандартнаяОбработкаФормой      - Булево - в этот параметр возвратить Ложь, если надо запретить стандартную обработку события формой;
//  СтандартнаяОбработкаБиблиотекой - Булево - в этот параметр возвратить Ложь, если надо запретить стандартную обработку события библиотекой.
//
Процедура ОбработкаНавигационнойСсылки(Форма, ЭлементФормы, НавигационнаяСсылка, СтандартнаяОбработкаФормой, СтандартнаяОбработкаБиблиотекой) Экспорт

КонецПроцедуры

// Обработчик события "ОбработкаОповещения" любой формы.
//
// Параметры:
//  Форма                           - ФормаКлиентскогоПриложения - форма, в которой инициировано событие;
//  КонтрагентОбъект                - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  ИмяСобытия                      - Произвольный - имя события;
//  Параметр                        - Произвольный - параметр оповещения;
//  Источник                        - Произвольный - источник оповещения;
//  СтандартнаяОбработкаБиблиотекой - Булево - в этот параметр возвратить Ложь, если надо запретить стандартную обработку события библиотекой.
//
Процедура ОбработкаОповещения(Форма, КонтрагентОбъект, ИмяСобытия, Параметр, Источник, СтандартнаяОбработкаБиблиотекой) Экспорт

	Если Форма.ИмяФормы = "Справочник.ВнутренниеДокументы.Форма.ФормаЭлемента" Тогда
		СтандартнаяОбработкаБиблиотекой = Ложь;
		ТипСтруктура    = Тип("Структура");
		ТипСоответствие = Тип("Соответствие");
		
		Если ВРег(ИмяСобытия) = ВРег("СПАРКРиски:ИзмененоСостояниеФоновогоЗадания") Тогда
			Если Источник = Форма.УникальныйИдентификатор Тогда
				// Параметр - Структура с ключами, как описано в НовыйПроверкаЗавершенностиФоновогоЗадания.
				Если Параметр.Статус = "Выполнено" Тогда
					Если НЕ ПустаяСтрока(Параметр.АдресХранилищаФоновогоЗадания) Тогда
						// Во временном хранилище хранится структура возврата СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов.
						// Там есть таблица значений, которую необходимо преобразовать в структуру вида СПАРКРискиКлиентСервер.НовыйДанныеИндексов.
						Форма.ИндексыСПАРКРиски = СПАРКРискиВызовСервера.ПолучитьПервыйИндекс(Параметр.АдресХранилищаФоновогоЗадания);
						Если ТипЗнч(Форма.ИндексыСПАРКРиски) = ТипСтруктура Тогда
							Если Не Форма.ИндексыСПАРКРиски.ДоступностьПодключенияТестовогоПериода = "Подключение" Тогда
								// Сохранить полученное значение в кэше.
								Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
									ПараметрыПриложения = Новый Соответствие;
								КонецЕсли;
								ИмяПараметраПриложения = ИдентификаторКэшаИндексов();
								КэшИндексов = ПараметрыПриложения[ИмяПараметраПриложения];
								Если ТипЗнч(КэшИндексов) <> ТипСоответствие Тогда
									КэшИндексов = Новый Соответствие;
								КонецЕсли;
								Форма.ИндексыСПАРКРиски.Вставить("ДатаЗаполненияКлиентскогоКэша", ОбщегоНазначенияКлиент.ДатаСеанса());
								КэшИндексов.Вставить(Форма.ИндексыСПАРКРиски.Контрагент, Форма.ИндексыСПАРКРиски);
								ПараметрыПриложения.Вставить(ИмяПараметраПриложения, КэшИндексов);
							КонецЕсли;
						Иначе
							Форма.ИндексыСПАРКРиски = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
							// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
							//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
							Форма.ИндексыСПАРКРиски.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
						КонецЕсли;
						// ВидОшибки заполнился из временного хранилища (из таблицы).
						Форма.ИндексыСПАРКРиски.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания"));
						Форма.ИндексыСПАРКРиски.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка"));
						Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина); // Перерисовать форму.
					Иначе
					КонецЕсли;
				ИначеЕсли Параметр.Статус = "Отменено" Тогда
					Если Форма.ИндексыСПАРКРиски <> ТипСтруктура Тогда
						Форма.ИндексыСПАРКРиски = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
						// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
						//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
						Форма.ИндексыСПАРКРиски.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
					КонецЕсли;
					Форма.ИндексыСПАРКРиски.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка"));
					Форма.ИндексыСПАРКРиски.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных"));
					Форма.ИндексыСПАРКРиски.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания"));
					Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина); // Перерисовать форму.
				ИначеЕсли Параметр.Статус = "Ошибка" Тогда
					Если Форма.ИндексыСПАРКРиски <> ТипСтруктура Тогда
						Форма.ИндексыСПАРКРиски = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
						// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
						//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
						Форма.ИндексыСПАРКРиски.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
					КонецЕсли;
					Форма.ИндексыСПАРКРиски.Вставить("ТекстОшибки", Параметр.ПодробноеПредставлениеОшибки);
					Форма.ИндексыСПАРКРиски.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка"));
					Форма.ИндексыСПАРКРиски.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных"));
					Форма.ИндексыСПАРКРиски.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания"));
					Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина); // Перерисовать форму.
				ИначеЕсли Параметр.Статус = "Выполняется" Тогда
					// Об этом статусе не должно сообщаться. На него никак не надо реагировать.
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура переопределяет интервал проверки фоновых заданий и количество повторов проверки.
//
// Параметры:
//  КоличествоПроверок - Число - количество проверок фоновых заданий. Должно быть от 1 до 40. По-умолчанию 20;
//  ИнтервалПроверки   - Число - интервал проверки фоновых заданий (в секундах, должно быть от 1 до 30). По-умолчанию 1 секунда.
//
Процедура ПереопределитьПараметрыПроверкиФоновыхЗаданий(КоличествоПроверок, ИнтервалПроверки) Экспорт

КонецПроцедуры

// Функция возвращает идентификатор кэша индексов, который хранит последние использованные данные индексов 1СПАРКРиски.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Строка - идентификатор кэша индексов.
//
Функция ИдентификаторКэшаИндексов()

	Возврат "ИнтернетПоддержкаПользователей.СПАРКРиски.КэшИндексов"; // Идентификатор.

КонецФункции

#КонецОбласти
