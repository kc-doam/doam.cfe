#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет в регистр запись о связи.
//
// Параметры:
//   ИДВнешнегоОбъекта - Строка - идентификатор внешнего объекта.
//   ТипВнешнегоОбъекта - Строка - имя типа XDTO.
//   СсылкаНаОбъектДО - ЛюбаяСсылка - ссылка на объект Документооборота.
//
Процедура ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаОбъектДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Узел = ПараметрыСеанса.УзелИнтегрированнойСистемы;
	
	НаборЗаписей = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.УзелИнтегрированнойСистемы.Установить(Узел);
	НаборЗаписей.Отбор.ИДВнешнегоОбъекта.Установить(ИДВнешнегоОбъекта);
	НаборЗаписей.Отбор.ТипВнешнегоОбъекта.Установить(ТипВнешнегоОбъекта);
	НаборЗаписей.Отбор.СсылкаНаОбъектДО.Установить(СсылкаНаОбъектДО);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.УзелИнтегрированнойСистемы = Узел;
	НоваяЗапись.ИДВнешнегоОбъекта = ИДВнешнегоОбъекта;
	НоваяЗапись.ТипВнешнегоОбъекта = ТипВнешнегоОбъекта;
	НоваяЗапись.СсылкаНаОбъектДО = СсылкаНаОбъектДО;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет из регистра запись о связи.
//
// Параметры:
//   ИДВнешнегоОбъекта - Строка - идентификатор внешнего объекта.
//   ТипВнешнегоОбъекта - Строка - имя типа XDTO.
//   СсылкаНаОбъектДО - ЛюбаяСсылка - ссылка на объект Документооборота.
//
Процедура УдалитьСвязьОбъектаДОИВнешнегоОбъекта(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаОбъектДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Узел = ПараметрыСеанса.УзелИнтегрированнойСистемы;
	
	НаборЗаписей = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.УзелИнтегрированнойСистемы.Установить(Узел);
	НаборЗаписей.Отбор.ИДВнешнегоОбъекта.Установить(ИДВнешнегоОбъекта);
	НаборЗаписей.Отбор.ТипВнешнегоОбъекта.Установить(ТипВнешнегоОбъекта);
	НаборЗаписей.Отбор.СсылкаНаОбъектДО.Установить(СсылкаНаОбъектДО);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает объекты конфигурации по ID и Типу внешнего объекта, запуская исправление связей,
// если в выборке обнаруживается запись с пустой ссылкой на узел интегрированной системы.
//
// Параметры:
//   ID - Строка - идентификатор внешнего объекта.
//   Тип - Строка - имя типа XDTO.
//   ПоказыватьПомеченныеНаУдаление - Булево - Истина, если нужны помеченные на удаление объекты.
//
// Возвращаемое значение:
//   Массив - массив ссылок на связанные объекты.
//
Функция ПолучитьОбъектыДОПоВнешнемуОбъекту(ID, Тип, ПоказыватьПомеченныеНаУдаление = Ложь) Экспорт
	
	МассивСсылокНаОбъектыДО = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СсылкаНаОбъектДО,
		|	УзелИнтегрированнойСистемы,
		|	ТипВнешнегоОбъекта,
		|	ИСТИНА КАК СвязиОбъектовИнтегрированныхСистем
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем
		|ГДЕ
		|	УзелИнтегрированнойСистемы В (&Узлы)
		|	И ИДВнешнегоОбъекта = &Идентификатор
		|	И ТипВнешнегоОбъекта В (&ТипыВСвязях)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УникальныйИдентификаторИсточника,
		|	Неопределено,
		|	ТипПриемника,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
		|ГДЕ
		|	УникальныйИдентификаторПриемника = &Идентификатор
		|	И ТипПриемника = &ТипВСоответствиях
		|");
	
	Узлы = Новый Массив;
	Узлы.Добавить(ПараметрыСеанса.УзелИнтегрированнойСистемы);
	Узлы.Добавить(ПланыОбмена.ИнтегрированныеСистемы.ПустаяСсылка());
	
	ТипыВСвязях = Новый Массив;
	ТипыВСвязях.Добавить("");
	ТипыВСвязях.Добавить(Тип);
	
	ТипВСоответствиях = СтрЗаменить(Тип, "Документ.", "ДокументСсылка.");
	ТипВСоответствиях = СтрЗаменить(ТипВСоответствиях, "Справочник.", "СправочникСсылка.");
	
	Запрос.УстановитьПараметр("Узлы", Узлы);
	Запрос.УстановитьПараметр("ТипыВСвязях", ТипыВСвязях);
	Запрос.УстановитьПараметр("ТипВСоответствиях", ТипВСоответствиях);
	Запрос.УстановитьПараметр("Идентификатор", ID);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.УзелИнтегрированнойСистемы)
				Или Не ЗначениеЗаполнено(Выборка.ТипВнешнегоОбъекта)
				И Выборка.СвязиОбъектовИнтегрированныхСистем Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ИсправитьЗаписьСвязиОбъектов(
				Выборка.СсылкаНаОбъектДО,
				Выборка.УзелИнтегрированнойСистемы,
				Выборка.ТипВнешнегоОбъекта,
				ПараметрыСеанса.УзелИнтегрированнойСистемы,
				Тип,
				ID);
		КонецЕсли;
		
		// Проверим доступность по правам и RLS.
		Если Не ПравоДоступа("Чтение", Выборка.СсылкаНаОбъектДО.Метаданные()) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗапросДоступности = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Объекты.Ссылка
			|ИЗ
			|	" + Выборка.СсылкаНаОбъектДО.Метаданные().ПолноеИмя() + " КАК Объекты
			|ГДЕ
			|	Объекты.Ссылка = &СсылкаНаВладельца");
		ЗапросДоступности.УстановитьПараметр("СсылкаНаВладельца", Выборка.СсылкаНаОбъектДО);
		Если ЗапросДоступности.Выполнить().Выбрать().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьОбъект = Истина;
		Если НЕ ПоказыватьПомеченныеНаУдаление Тогда
			Если Выборка.СсылкаНаОбъектДО.ПометкаУдаления Тогда
				ДобавитьОбъект = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьОбъект Тогда
			МассивСсылокНаОбъектыДО.Добавить(Выборка.СсылкаНаОбъектДО);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСсылокНаОбъектыДО;
	
КонецФункции

// Получает список внешних объектов для объекта ДО для обращающейся интегрированной системы.
//
// Параметры:
//   Объект - ЛюбаяСсылка - ссылка на объект Документооборота.
//
// Возвращаемое значение:
//   Массив - массив структур со свойствами Идентификатор, Тип.
//
Функция ПолучитьСписокВнешнихОбъектов(Объект) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Связи.ИДВнешнегоОбъекта КАК Идентификатор,
		|	Связи.ТипВнешнегоОбъекта КАК Тип,
		|	Истина КАК ТипНеТребуетПреобразования
		|ПОМЕСТИТЬ
		|	СвязиОбъектов
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК Связи
		|ГДЕ
		|	Связи.СсылкаНаОбъектДО = &СсылкаНаОбъектДО
		|	И Связи.УзелИнтегрированнойСистемы = &УзелИнтегрированнойСистемы
		|
		|; //////////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	СвязиОбъектов.Идентификатор,
		|	СвязиОбъектов.Тип,
		|	СвязиОбъектов.ТипНеТребуетПреобразования
		|ИЗ
		|	СвязиОбъектов
		|");
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Соответствия.УникальныйИдентификаторПриемника КАК Идентификатор,
		|	Соответствия.ТипПриемника КАК Тип,
		|	Ложь КАК ТипНеТребуетПреобразования
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК Соответствия
		|ГДЕ
		|	Соответствия.УникальныйИдентификаторИсточника = &СсылкаНаОбъектДО
		|	И Соответствия.УзелИнформационнойБазы В (
		|		ВЫБРАТЬ
		|			УзелДляСинхронизацииДанных
		|		ИЗ
		|			ПланОбмена.ИнтегрированныеСистемы
		|		ГДЕ
		|			Ссылка = &УзелИнтегрированнойСистемы
		|	)
		|	И Соответствия.УникальныйИдентификаторПриемника НЕ В (
		|		ВЫБРАТЬ
		|			Идентификатор
		|		ИЗ
		|			СвязиОбъектов
		|	)
		|";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СсылкаНаОбъектДО", Объект);
	Запрос.УстановитьПараметр("УзелИнтегрированнойСистемы",
		ПараметрыСеанса.УзелИнтегрированнойСистемы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипНеТребуетПреобразования Тогда // тип сразу в виде "Справочник.Контрагенты"
			Тип = Выборка.Тип;
		Иначе // тип в виде "СправочникСсылка.Контрагенты" требует преобразования
			Тип = СтрЗаменить(Выборка.Тип, "Ссылка.", ".");
		КонецЕсли;
		
		Результат.Добавить(Новый Структура("Идентификатор, Тип",
			Выборка.Идентификатор,
			Тип));
		
	КонецЦикла;
		
	Возврат Результат;
		
КонецФункции

// Возвращает выборку интегрированных объектов для обращающейся интегрированной системы.
//
Функция ВыборкаИнтегрированныхОбъектов() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО,
		|	СвязиОбъектовИнтегрированныхСистем.ИДВнешнегоОбъекта,
		|	СвязиОбъектовИнтегрированныхСистем.ТипВнешнегоОбъекта
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
		|ГДЕ
		|	СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы = &УзелИнтегрированнойСистемы
		|");
	Запрос.УстановитьПараметр("УзелИнтегрированнойСистемы", ПараметрыСеанса.УзелИнтегрированнойСистемы);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

// Получает ссылку по идентификатору и типу внешнего объекта, если объект существует в БД.
//
// Параметры:
//   ИДВнешнегоОбъекта - Строка - идентификатор внешнего объекта.
//   ТипВнешнегоОбъекта - Строка - тип внешнего объекта.
//   ВидСправочника - Строка - вид справочника
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка, если объект найден по идентификатору и типу.
//   Неопределено - если объект не найден.
//
Функция СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, ВидСправочника) Экспорт
	
	СсылкаПоИдентификатору = Справочники[ВидСправочника].ПолучитьСсылку(
		Новый УникальныйИдентификатор(ИДВнешнегоОбъекта));
	
	// У связей, сохраненных в регистре - приоритет.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СсылкаНаОбъектДО КАК Ссылка,
		|	УзелИнтегрированнойСистемы КАК УзелИнтегрированнойСистемы,
		|	ТипВнешнегоОбъекта КАК ТипВнешнегоОбъекта,
		|	ИСТИНА КАК ЗаписьРегистра
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем
		|ГДЕ
		|	УзелИнтегрированнойСистемы В(&Узлы)
		|	И ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник." + ВидСправочника + ")
		|	И ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта
		|	И (ТипВнешнегоОбъекта = &ТипВнешнегоОбъекта ИЛИ ТипВнешнегоОбъекта = """")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка,
		|	Неопределено,
		|	Неопределено,
		|	ЛОЖЬ КАК ЗаписьРегистра
		|ИЗ
		|	Справочник." + ВидСправочника + "
		|ГДЕ
		|	Ссылка = &СсылкаПоИдентификатору");
	Узлы = Новый Массив;
	Узлы.Добавить(ПараметрыСеанса.УзелИнтегрированнойСистемы);
	Узлы.Добавить(ПланыОбмена.ИнтегрированныеСистемы.ПустаяСсылка());
	Запрос.УстановитьПараметр("Узлы", Узлы);
	Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
	Запрос.УстановитьПараметр("ИДВнешнегоОбъекта", ИДВнешнегоОбъекта);
	Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", ТипВнешнегоОбъекта);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЗаписьРегистра
				И (Не ЗначениеЗаполнено(Выборка.УзелИнтегрированнойСистемы)
					Или Не ЗначениеЗаполнено(Выборка.ТипВнешнегоОбъекта)) Тогда
			ИсправитьЗаписьСвязиОбъектов(
				Выборка.Ссылка,
				Выборка.УзелИнтегрированнойСистемы,
				Выборка.ТипВнешнегоОбъекта,
				ПараметрыСеанса.УзелИнтегрированнойСистемы,
				ТипВнешнегоОбъекта,
				ИДВнешнегоОбъекта);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Исправляет запись регистра СвязиОбъектовИнтегрированныхСистем обновленными сведениями
//
// Параметры:
//   Объект - ЛюбаяСсылка - ссылка на связанный объект
//   ИсходныйУзел - ПланОбменаСсылка.ИнтегрированныеСистемы - старое значение узла
//   ИсходныйТипОбъекта - Строка - старое имя типа XDTO связанного объекта
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - новое значение узла
//   ТипОбъекта - Строка - новое имя типа XDTO связанного объекта
//   ИдентификаторОбъекта - Строка - идентификатор связанного объекта
//
Процедура ИсправитьЗаписьСвязиОбъектов(Объект, ИсходныйУзел, ИсходныйТипОбъекта, Узел, ТипОбъекта, ИдентификаторОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(Узел)
		Или ЗначениеЗаполнено(ИсходныйУзел) Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерЗаписи = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъектДО = Объект;
	МенеджерЗаписи.УзелИнтегрированнойСистемы = ИсходныйУзел;
	МенеджерЗаписи.ТипВнешнегоОбъекта = ИсходныйТипОбъекта;
	МенеджерЗаписи.ИДВнешнегоОбъекта = ИдентификаторОбъекта;
	МенеджерЗаписи.Удалить();
	
	МенеджерЗаписи = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъектДО = Объект;
	МенеджерЗаписи.УзелИнтегрированнойСистемы = Узел;
	МенеджерЗаписи.ТипВнешнегоОбъекта = ТипОбъекта;
	МенеджерЗаписи.ИДВнешнегоОбъекта = ИдентификаторОбъекта;
	МенеджерЗаписи.Записать();
	
	ЗаполнитьУзлыСвязанныхОбъектов(Узел);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет ссылку на узел в тех записях РС СвязиОбъектовИнтегрированныхСистем, где она не заполнена.
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - значение для заполнения.
//
Процедура ЗаполнитьУзлыСвязанныхОбъектов(Узел)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО,
		|	СвязиОбъектовИнтегрированныхСистем.ИДВнешнегоОбъекта,
		|	СвязиОбъектовИнтегрированныхСистем.ТипВнешнегоОбъекта
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
		|ГДЕ
		|	СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы = &ПустойУзел");
	Запрос.УстановитьПараметр("ПустойУзел", ПланыОбмена.ИнтегрированныеСистемы.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Выборка);
		Менеджер.УзелИнтегрированнойСистемы = Узел;
		Менеджер.Записать();
	КонецЦикла; 
	
	НаборЗаписей = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелИнтегрированнойСистемы.Установить(ПланыОбмена.ИнтегрированныеСистемы.ПустаяСсылка());
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли