// Таблица для хранения списка всех добавленных реквизитов, 
// аналог Свойства_ОписаниеДополнительныхРеквизитов в стандартной форме
&НаСервере
Процедура РасшДОАМ_СоздатьТаблицуОписанияРасширенныхРеквизитов(Реквизиты)
	
	ИмяОписания = "ТаблицаОписанияРасширенныхРеквизитов";
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));

	Реквизиты.Добавить(Новый РеквизитФормы(
		"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
			ИмяОписания));
			
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписания));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ИмяПоля", Новый ОписаниеТипов("Строка"), ИмяОписания));
		
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяОписания));
			
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ИмяОписания));
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляРасширенногоРеквизита(Элемент)
	
	ПриИзмененииПоляРасширенногоРеквизитаНаСервере(Элемент.Имя);		
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоляРасширенногоРеквизитаНаСервере(ИмяПоля)
	
	ЧистыйМассив = Новый Массив;
	
	МассивЗначений = ЭтаФорма[ИмяПоля].ВыгрузитьЗначения();
	Для Каждого текЗначение Из МассивЗначений Цикл		
		Если ЧистыйМассив.Найти(текЗначение) = Неопределено Тогда
			Если ЗначениеЗаполнено(текЗначение) Тогда
				ЧистыйМассив.Добавить(текЗначение);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	ЭтаФорма[ИмяПоля].ЗагрузитьЗначения( ЧистыйМассив );
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяРеквизитаФормы(НазваниеДопРеквизита, Форма) // 2018-03
            
    ИмяРеквизита = "";
    МассивРеквизитов = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", НазваниеДопРеквизита));            
    Если МассивРеквизитов.Количество() > 0 Тогда
    	ИмяРеквизита = МассивРеквизитов[0].ИмяРеквизитаЗначение;
    КонецЕсли;
    Возврат ИмяРеквизита;
            
КонецФункции

&НаСервере
Процедура ПереносПолейКарточкиКонтрагента() // GUI 2018-03
	
	Перем СвойствоЭлемент;
	
	// Перемещение объектов в карточке контрагента 
	Страница = Элементы.Страницы.ПодчиненныеЭлементы.Найти("ГруппаИсторияВзаимодействия");
	
	КоличествоГрупп = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы.Количество();
	ПоляСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДополнительныеРеквизиты
		.ПодчиненныеЭлементы[КоличествоГрупп-1].ПодчиненныеЭлементы;
	
	// 2021-12
	////ГруппыСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы[1];
	////ПоляСтраницы = ГруппыСтраницы.ПодчиненныеЭлементы;	
		
	// Важно! Если испольцовать цикл, то счётчик проскакивает на 1 после перемещения поля
	СвойствоЭлемент = ПоляСтраницы.Найти(
		ПолучитьИмяРеквизитаФормы("Источник информации", ЭтаФорма)); // ТИП = ПолеФормы
	Попытка
		Элементы.Переместить(СвойствоЭлемент, Страница, Страница.ПодчиненныеЭлементы.Найти("ИсторияВзаимодействия"));
	Исключение
		Сообщить("Невозможно переместить поле со значением: " + ПолучитьЗначениеДополнительногоРеквизитаНаФорме(ЭтаФорма, "ИсточникИнформации"));		
	КонецПопытки;
	
	СвойствоЭлемент = ПоляСтраницы.Найти(
		ПолучитьИмяРеквизитаФормы("Дополнительная информация об источнике", ЭтаФорма));
	Попытка
		Элементы.Переместить(СвойствоЭлемент, Страница, Страница.ПодчиненныеЭлементы.Найти("ИсторияВзаимодействия"));
	Исключение
		Сообщить("Невозможно переместить поле со значением: " + ПолучитьЗначениеДополнительногоРеквизитаНаФорме(ЭтаФорма, "ДополнительнаяИнформацияОбИсточнике"));		
	КонецПопытки;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита) Экспорт // ТЕСТ 2021-12
	
	Перем ЗначениеРеквизита;
	
	ПолеДополнительногоРеквизитаНаФорме = ПолучитьПолеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита); // ТИП = ДанныеФормыЭлементКоллекции
	
	Если не ПолеДополнительногоРеквизитаНаФорме = Неопределено Тогда
		Возврат Форма[ПолеДополнительногоРеквизитаНаФорме.ИмяРеквизитаЗначение];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПолеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита) Экспорт // ТЕСТ 2021-12
	
	Список = Форма.Свойства_ОписаниеДополнительныхРеквизитов;
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяРеквизита);
	
	Если ЗначениеЗаполнено(Свойство) Тогда
	    НайденныеСтроки = Список.НайтиСтроки(Новый Структура("Свойство", Свойство));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0];		
		КонецЕсли; 		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура РасшДОАМ_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	//// Удаленный функционал в 2.1.29.17                                       
	////Есть = УправлениеДоступом.ЕстьПравоПоЗначениюДоступа("Редактирование", Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь);
	
	ПроверкаПросмотраКонтрагентов = Ложь;
	ПодразделениеОтветственного = Объект.Ответственный.Подразделение;
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	СведенияПользователей = РегистрыСведений.СведенияОПользователяхДокументооборот.Получить(
		Новый Структура("Пользователь", Пользователь));
	ПодразделениеПользователя = СведенияПользователей.Подразделение;
	ДолжностьПользователя = СведенияПользователей.Должность;
	
	//// DOAM 2022-10-21 {
		СсылкаОВП = Справочники.СтруктураПредприятия.НайтиПоНаименованию("ОВП");
		Если ПодразделениеОтветственного.Родитель = СсылкаОВП
		ИЛИ ПодразделениеОтветственного = СсылкаОВП
		И СтрНайти(НРег(ДолжностьПользователя), "руководитель") Тогда
			
			Если ПодразделениеПользователя.Родитель = СсылкаОВП Тогда
			////ИЛИ ПодразделениеПользователя = Справочники.СтруктураПредприятия.НайтиПоНаименованию("ОПАМ")
				ПодразделениеПользователя = ПодразделениеОтветственного.Родитель;
			КонецЕсли;
			
		КонецЕсли;

		Пока НЕ ПодразделениеОтветственного.Ссылка.Пустая() Цикл
			Если ПодразделениеОтветственного = ПодразделениеПользователя Тогда
				ПроверкаПросмотраКонтрагентов = ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты);
				Прервать;
			КонецЕсли;
			
			ПодразделениеОтветственного = ПодразделениеОтветственного.Родитель;
		КонецЦикла;

		Если РольДоступна(Метаданные.Роли.РаботаСЗадачамиСотрудниковПодразделения)
		И ПроверкаПросмотраКонтрагентов = Истина
		ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			ПроверкаПросмотраКонтрагентов = Истина;
		Иначе
			ПроверкаПросмотраКонтрагентов = Ложь;
		КонецЕсли;
		
		//Делегирование, проверка по списку (назначает Администратор)
		Если ДокументооборотПраваДоступаПереопределяемый.ЭтоДелегат(Пользователь, Истина) Тогда //// 2019-07-04
			ПроверкаДелегата = Ложь;
			СписокДелегатов = Справочники.ДелегированиеПрав.СписокДелегирующих(Пользователь);
			
			Для Каждого ЭтоДелегат Из СписокДелегатов Цикл
				Если ЭтоДелегат = Объект.Ответственный Тогда
					ПроверкаДелегата = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//Сообщить(ПроверкаПросмотраКонтрагентов);
	//// } DOAM 
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		// //только если объект не новый
		
		//Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			//Сообщить(Пользователь.Ссылка.Наименование + " имеет Полные Права!"); // Администратор
				
		Если Объект.Ответственный.Подразделение.Ссылка.Пустая()
			ИЛИ ПроверкаПросмотраКонтрагентов
			ИЛИ Объект.Ответственный = Пользователь
			ИЛИ Объект.Ответственный = ЭтоДелегат И ПроверкаДелегата Тогда //// 2019-07-04
			
			//Сообщить(Пользователь.Ссылка.Наименование + " имеет Права доступа!"); // Пользователь
			
		Иначе			
			Если ПустаяСтрока(ПодразделениеОтветственного.Наименование) Тогда
				ПараметрСообщения = "подразделения " + Объект.Ответственный.Подразделение;		    	
			Иначе
				ПараметрСообщения = "департамента ДОАМ";
			КонецЕсли;
			
			// Роль недоступна для работы с сотрудниками подразделений
			// ИЛИ отсутствуют Права доступа для просмотра справочника «Контрагенты» (назначает Администратор)
			Если СтрНайти(НРег(ДолжностьПользователя), "руководитель") Тогда
				Сообщить("Данные контрагента «" + Объект.Наименование + "» можно запросить у Руководителя " + ПараметрСообщения);
			Иначе
				Сообщить("Карточка контрагента недоступна. Обратитесь к руководителю своего подразделения");
			КонецЕсли;
			
			Отказ = Истина;
			Возврат;
						
		КонецЕсли;
		// Перезаписывается только при "Записи" данных пользователя, но не при изменении Структуры предприятия
		//Сообщить(ПодразделениеОтветственного.Руководитель);
	КонецЕсли;
	
	// страница для расширенных реквизитов
	Страница 			= Элементы.Добавить("ГруппаРасширения", Тип("ГруппаФормы"), Элементы.Страницы);	
	Страница.Вид 		= ВидГруппыФормы.Страница;	
	Страница.Заголовок 	= "Расширенные реквизиты";
	
	Реквизиты 	= Новый Массив;
	
	РасшДОАМ_СоздатьТаблицуОписанияРасширенныхРеквизитов(Реквизиты);	
	
	// добавляются реквизиты формы	
	ТЗРеквизиты = ОбщийДОАМ.РасшДОАМ_ПолучитьРасширенныеРеквизиты();
	Для Каждого текРеквизит Из ТЗРеквизиты Цикл 
		ИмяПоля 	= текРеквизит.ИмяПоля; 		
		Реквизит 	= Новый РеквизитФормы(ИмяПоля, Новый ОписаниеТипов("СписокЗначений"),,текРеквизит.Наименование);	
		Реквизиты.Добавить(Реквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	
	ТЗРасширенныхРеквизитов = ЭтаФорма.ТаблицаОписанияРасширенныхРеквизитов;
	
	// создаются поля на форме
	Для Каждого текРеквизит Из ТЗРеквизиты Цикл
		                      
		ИмяПоля 			= текРеквизит.ИмяПоля;
		СвойствоРеквизит 	= текРеквизит.Свойство;
		ТипЗначения			= текРеквизит.ТипЗначения;
	    ЗаголовокРеквизита	= текРеквизит.Наименование;
		
		ЭтаФорма[ИмяПоля].ТипЗначения  	= ТипЗначения; // Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"); или 	Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
		НовыйЭлемент 							= Элементы.Вставить(ИмяПоля, Тип("ПолеФормы"), Страница);
		НовыйЭлемент.Вид						= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным				= ИмяПоля;
		НовыйЭлемент.Заголовок					= ЗаголовокРеквизита;
		НовыйЭлемент.АвтоОтметкаНезаполненного  = текРеквизит.ЗаполнятьОбязательно;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииПоляРасширенногоРеквизита");
		
		// установить параметры выбора, чтобы при выборе в списке отображался только нужный тип данных
		ПараметрСвойство						= Новый ПараметрВыбора("Отбор.Владелец", СвойствоРеквизит);
		МассивПараметров						= Новый Массив();
		МассивПараметров.Добавить(ПараметрСвойство);
		ФиксМассПараметров						= Новый ФиксированныйМассив(МассивПараметров);
		НовыйЭлемент.ПараметрыВыбора			= ФиксМассПараметров; 
	
		// загрузка значений в реквизиты формы из регистра
		ТЗ = Объект.РасширенныеРеквизиты.Выгрузить(Новый Структура("Свойство", СвойствоРеквизит), "Значение");
		МассивЗначений = ТЗ.ВыгрузитьКолонку("Значение"); 
		ЭтаФорма[ИмяПоля].ЗагрузитьЗначения( МассивЗначений );
		
		НоваяСтрока = ТЗРасширенныхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, текРеквизит);
		
	КонецЦикла;
		
	// Перемещение вкладки в карточке контрагента // 2018-03
	Страница = Элементы.Страницы.ПодчиненныеЭлементы.Найти("ГруппаИсторияВзаимодействия");
	Элементы.Переместить(Страница, Элементы.Страницы); 
	
	
	Если Параметры.Ключ.Пустая() Тогда 
		НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","СозданиеКарточки");
		НоваяСтрока.Значение = ТекущаяДата();
	КонецЕсли;
	
	ОбщийДОАМКлиентСервер.ВывестиСтрокиТаблицыИсточника(ЭтаФорма, Объект.Соавторы, Элементы.ГруппаСоавторы);
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
		ПаспортныеДанные = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(Объект.ФизЛицо);
		ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("СНИЛС",ИСТИНА); 
		СНИЛС =СтрЗаменить(РегистрыСведений.ДокументыФизическихЛиц.ПолучитьДанныеДокумента(Объект.ФизЛицо,ВидДокумента, "Серия"),"СНИЛС","");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_ПриОткрытииПосле(Отказ)
	
	ПереносПолейКарточкиКонтрагента(); // ПЕРЕНОС ПОЛЕЙ 2018-03

КонецПроцедуры

&НаСервере
Процедура РасшДОАМ_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// требуется сохранить все значения расширенных реквизитов	
	ТЗРасширенныхРеквизитов = ЭтаФорма.ТаблицаОписанияРасширенныхРеквизитов;
	Объект.РасширенныеРеквизиты.Очистить();
	ТЗ = Объект.РасширенныеРеквизиты.Выгрузить().СкопироватьКолонки();
	Для Каждого текРеквизит Из ТЗРасширенныхРеквизитов Цикл
		
		ИмяПоля 			= текРеквизит.ИмяПоля;
		СвойствоРеквизит 	= текРеквизит.Свойство;
		
		МассивЗначений 		= ЭтаФорма[ИмяПоля].ВыгрузитьЗначения();
		Для Каждого текЗначение Из МассивЗначений Цикл
		    НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Свойство = СвойствоРеквизит;
			НоваяСтрока.Значение = текЗначение;
		КонецЦикла;
	
	КонецЦикла;
	ТекущийОбъект.РасширенныеРеквизиты.Загрузить(ТЗ);
	
	ДатаПоследняя = Дата(1,1,1);
	Если Объект.ИсторияВзаимодействия.Количество() > 0 Тогда
		ТЗИстория = Объект.ИсторияВзаимодействия.Выгрузить(,"Дата");
		ТЗИстория.Сортировать("Дата Убыв");
		ДатаПоследняя = ТЗИстория[0].Дата;
	КонецЕсли;

	ТекущийОбъект.ДатаПоследняя = ДатаПоследняя;

КонецПроцедуры


&НаСервере
// проверяется заполненность обязательных полей расширенных реквизитов 
// (для обычных доп реквизитов это уже реализовано в стандартном модуле)
Процедура РасшДОАМ_ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТЗРасширенные = ЭтаФорма.ТаблицаОписанияРасширенныхРеквизитов;
	Для Каждого текРеквизит Из ТЗРасширенные Цикл 		

		Если Элементы[текРеквизит.ИмяПоля].ОтметкаНезаполненного Тогда
	    	Сообщить("Поле: """ + текРеквизит.Наименование + """ не заполнено");
			Отказ = Истина;
		КонецЕсли;
	
	КонецЦикла;
					
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_ЮрФизЛицоПриИзмененииПосле(Элемент)
	
	ПереносПолейКарточкиКонтрагента(); // ПЕРЕНОС ПОЛЕЙ 2018-03
	
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_ИсторияВзаимодействияПриНачалеРедактированияПосле(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока ИЛИ Копирование Тогда 
		Элемент.ТекущиеДанные.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_СоавторыДобавитьПосле(Команда)
	РасшДОАМ_СоавторыДобавитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура РасшДОАМ_СоавторыДобавитьНаСервере()
	ОбщийДОАМКлиентСервер.ДобавитьСтроку(ЭтаФорма, Объект.Соавторы, Элементы.ГруппаСоавторы, 10);
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_СоавторыУдалитьПосле(Команда)
	ОбщийДОАМКлиентСервер.УдалитьСтроку(ЭтаФорма, Объект.Соавторы, Элементы.ГруппаСоавторы);  
КонецПроцедуры
