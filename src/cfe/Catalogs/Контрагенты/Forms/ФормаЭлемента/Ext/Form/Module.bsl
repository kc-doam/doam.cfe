// Таблица для хранения списка всех добавленных реквизитов,
// аналог Свойства_ОписаниеДополнительныхРеквизитов в стандартной форме
&НаСервере
Процедура РасшДОАМ_СоздатьТаблицуОписанияРасширенныхРеквизитов(Реквизиты)
	
	ИмяОписания = "ТаблицаОписанияРасширенныхРеквизитов";
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
			ИмяОписания));
		
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписания));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ИмяПоля", Новый ОписаниеТипов("Строка"), ИмяОписания));
		
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяОписания));
			
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ИмяОписания));
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляРасширенногоРеквизита(Элемент)
	
	ПриИзмененииПоляРасширенногоРеквизитаНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоляРасширенногоРеквизитаНаСервере(ИмяПоля)
	
	ЧистыйМассив = Новый Массив;
	
	МассивЗначений = ЭтаФорма[ИмяПоля].ВыгрузитьЗначения();
	Для Каждого текЗначение Из МассивЗначений Цикл
		Если ЧистыйМассив.Найти(текЗначение) = Неопределено Тогда
			Если ЗначениеЗаполнено(текЗначение) Тогда
				ЧистыйМассив.Добавить(текЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма[ИмяПоля].ЗагрузитьЗначения( ЧистыйМассив );
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяРеквизитаФормы(Форма, НазваниеДопРеквизита) // 2018-03
	
	ИмяРеквизита = "";
	МассивРеквизитов = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", НазваниеДопРеквизита));
	Если МассивРеквизитов.Количество() > 0 Тогда
		ИмяРеквизита = МассивРеквизитов[0].ИмяРеквизитаЗначение;
	КонецЕсли;
	Возврат ИмяРеквизита;
	
КонецФункции

&НаСервере
Процедура ПереносПолейКарточкиКонтрагента() // GUI 2018-03
	
	Перем СвойствоЭлемент;
	
	// Перемещение объектов в карточке контрагента
	Страница = Элементы.Страницы.ПодчиненныеЭлементы.Найти("ГруппаИсторияВзаимодействия");
	
	КоличествоГрупп = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы.Количество();
	ПоляСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДополнительныеРеквизиты
		.ПодчиненныеЭлементы[КоличествоГрупп-1].ПодчиненныеЭлементы;
	
	// 2021-12
	////ГруппыСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы[1];
	////ПоляСтраницы = ГруппыСтраницы.ПодчиненныеЭлементы;
	
	// Важно! Если испольцовать цикл, то счётчик проскакивает на 1 после перемещения поля
	СвойствоЭлемент = ПоляСтраницы.Найти(
		ПолучитьИмяРеквизитаФормы(ЭтаФорма, "Источник информации")); // ТИП = ПолеФормы
	Попытка
		Элементы.Переместить(СвойствоЭлемент, Страница, Страница.ПодчиненныеЭлементы.Найти("ИсторияВзаимодействия"));
	Исключение
		Сообщить("Невозможно переместить поле со значением: " + ПолучитьЗначениеДополнительногоРеквизитаНаФорме(ЭтаФорма, "ИсточникИнформации"));		
	КонецПопытки;
	
	СвойствоЭлемент = ПоляСтраницы.Найти(
		ПолучитьИмяРеквизитаФормы(ЭтаФорма, "Дополнительная информация об источнике"));
	Попытка
		Элементы.Переместить(СвойствоЭлемент, Страница, Страница.ПодчиненныеЭлементы.Найти("ИсторияВзаимодействия"));
	Исключение
		Сообщить("Невозможно переместить поле со значением: " + ПолучитьЗначениеДополнительногоРеквизитаНаФорме(ЭтаФорма, "ДополнительнаяИнформацияОбИсточнике"));		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита) Экспорт // 2021-12
	
	ПолеДополнительногоРеквизитаНаФорме = ПолучитьПолеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита); // ТИП = ДанныеФормыЭлементКоллекции
	
	Если Не ПолеДополнительногоРеквизитаНаФорме = Неопределено Тогда
		Возврат Форма[ПолеДополнительногоРеквизитаНаФорме.ИмяРеквизитаЗначение];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПолеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита) Экспорт // 2021-12
	
	Список = Форма.Свойства_ОписаниеДополнительныхРеквизитов;
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяРеквизита);
	
	Если ЗначениеЗаполнено(Свойство) Тогда
		НайденныеСтроки = Список.НайтиСтроки(Новый Структура("Свойство", Свойство));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает Право доступа к Карточке контрагента.
//
// Параметры:
//  СсылкаПользователь - ПараметрыСеанса.ТекущийПользователь - Пользователь для проверки доступа.
// 
// Возвращаемое значение:
//  Логическое - Дать доступ или нет.
//
&НаСервере
Функция ПолучитьПравоДоступаККарточкеКонтрагента(СсылкаПользователь) ////Экспорт // 2024-12
	////  заметка по экспорту - https://dzen.ru/a/Y94yCYcNIA0oHidt
	
	РезультатПроверкиКарточкиКонтрагентов = Ложь;
	
	
	СведенияПользователя = РегистрыСведений.СведенияОПользователяхДокументооборот.Получить(
		Новый Структура("Пользователь", СсылкаПользователь));
	Если СведенияПользователя.Подразделение.Уровень() = 0 Тогда
		ПодразделениеРуководителяПользователя = СведенияПользователя.Подразделение;
	Иначе // Каждая "точка" блокирует таблицу
		ПодразделениеРуководителяПользователя = СведенияПользователя.Подразделение.Родитель;
	КонецЕсли;
	
	////ПодразделениеКарточки = Объект.Ответственный.Подразделение; // Каждая "точка" блокирует таблицу
	ПодразделениеКарточки = РаботаСПользователями.ПолучитьПодразделение(Объект.Ответственный);
	
	////ПодразделенияРуководителя = Справочники.СтруктураПредприятия.ПодчиненныеПодразделения(Объект.Ответственный);
	////Для Каждого ЭлементМассива из ПодразделенияРуководителя Цикл
	////	Если ЭлементМассива.Код = ПодразделениеКарточки.Код Тогда
	////		РезультатПроверкиКарточкиКонтрагентов = Истина;	
	////	КонецЕсли;	
	////КонецЦикла;
	
	Если РольДоступна("АдминистраторСистемы") Тогда // ОТЛАДКА
		Сообщить("[doc8.3] " + ПодразделениеКарточки
			+ ?(ПодразделениеКарточки.Уровень() >= СведенияПользователя.Подразделение.Уровень(), 
				" на одном уровне", " выше уровня") + " с " + СведенияПользователя.Подразделение
			+ ", в котором состоит " + СсылкаПользователь.ПредставлениеВПерепискеСРангом);	
	КонецЕсли;
	
	
	СсылкаОВП = Справочники.СтруктураПредприятия.НайтиПоНаименованию("ОВП", Истина);
	СсылкаОПАМ = Справочники.СтруктураПредприятия.НайтиПоНаименованию("ОПАМ", Истина);
	//// Справочники.СтруктураПредприятия.ВыбратьИерархически(<Родитель>, <Владелец>, <Отбор>, <Порядок>)
	//Выборка = Справочники.СтруктураПредприятия.ВыбратьИерархически(ПодразделениеРуководителяПользователя);
	//Пока Выборка.Следующий() Цикл
	//	ПодразделениеВыбоки = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Выборка);
	//	Сообщить("[doc8.3] " + "" + ПодразделениеВыбоки.Уровень()); 
	
	Если ПодразделениеКарточки.ПринадлежитЭлементу(ПодразделениеРуководителяПользователя) Тогда
		
		Если СведенияПользователя.Подразделение.Уровень() = 0
			И СтрНайти(НРег(СведенияПользователя.Должность), "руководитель департамента") Тогда
			
			РезультатПроверкиКарточкиКонтрагентов = Истина;
			
		КонецЕсли;
		
		Если ПодразделениеКарточки.Родитель.Код = СсылкаОПАМ.Код // 1 = ОПАМ
		И ( ПодразделениеРуководителяПользователя.Код = СсылкаОПАМ.Код
			Или СведенияПользователя.Подразделение.Код = СсылкаОПАМ.Код ) Тогда // Письмо от 2024-12-24
			
			РезультатПроверкиКарточкиКонтрагентов = Истина;
			
		КонецЕсли;
		
		Если ( ПодразделениеРуководителяПользователя.Код = СсылкаОВП.Код // 1 = ОВП
			Или СведенияПользователя.Подразделение.Код = СсылкаОВП.Код )
			И СтрНайти(НРег(СведенияПользователя.Должность), "руководитель подразделения")
		Или ПодразделениеКарточки.Код = СведенияПользователя.Подразделение.Код
			И ( СтрНайти(НРег(СведенияПользователя.Должность), "заместитель руководителя")
			Или СтрНайти(НРег(СведенияПользователя.Должность), "руководитель подразделения") ) Тогда
		
			РезультатПроверкиКарточкиКонтрагентов = Истина;
			
		КонецЕсли;
		
	Иначе
		Если ПодразделениеКарточки.Код = ПодразделениеРуководителяПользователя.Код
			И ПодразделениеРуководителяПользователя.Уровень() <= 1 Тогда // Письмо от 2024-12-24
			
			Если ( ПодразделениеРуководителяПользователя.Код = СсылкаОВП.Код // 1 = ОВП
				Или СведенияПользователя.Подразделение.Код = СсылкаОВП.Код )
				И СтрНайти(НРег(СведенияПользователя.Должность), "руководитель подразделения")
				//И ( ПодразделениеРуководителяПользователя.Код = СсылкаДОАМ.Код // 0 = ДОАМ
				//	Или ПодразделениеРуководителяПользователя.Код = СсылкаОВП.Код ) // 1 = ОВП
			Или ПодразделениеРуководителяПользователя.Код = СсылкаОПАМ.Код Тогда
				
				РезультатПроверкиКарточкиКонтрагентов = Истина;
	//			Прервать;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//	Продолжить;
	//КонецЦикла;
	//Выборка = Неопределено;	
	
	
	Возврат РезультатПроверкиКарточкиКонтрагентов;
	
КонецФункции

&НаСервере
Процедура РасшДОАМ_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	Перем РезультатПроверкиПрав;
	
	
	ПодразделениеОтветственного = РаботаСПользователями.ПолучитьПодразделение(Объект.Ответственный); 
	////РуководительОтветственного = ДелопроизводствоКлиентСервер.ПолучитьНепосредственногоРуководителя(
	////	ПодразделениеОтветственного, Объект.Ссылка);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	
	//// DOAM 2024-12 {	
	
		Если РольДоступна("ПолныеПрава") //Тогда
		// ОТЛАДКА ( Закомментировать кроме - РольДоступна("ПолныеПрава") Тогда )
			Или ПодразделениеОтветственного.Ссылка.Пустая()
			Или ТекущийПользователь = Объект.Ответственный
			Или ТекущийПользователь = Объект.ТакжеСотрудничает_в_ДОАМ Тогда
			
			РезультатПроверкиПрав = Истина;
		// Для "Рабочая группа" +Руководители подразделений
		ИначеЕсли РольДоступна("РаботаСЗадачамиСотрудниковПодразделения") Тогда
			
			РезультатПроверкиПрав = ПолучитьПравоДоступаККарточкеКонтрагента(ТекущийПользователь);
			
			// Делегирование, проверка по списку (назначает Администратор)
			Если ДокументооборотПраваДоступаПереопределяемый.ЭтоДелегат(ТекущийПользователь, Истина) Тогда
				
				СписокДелегатов = Справочники.ДелегированиеПрав.СписокДелегирующих(ТекущийПользователь);
				
				Для Каждого СсылкаДелегат Из СписокДелегатов Цикл
					РезультатПроверкиПрав = ПолучитьПравоДоступаККарточкеКонтрагента(СсылкаДелегат);
					Если РезультатПроверкиПрав = Истина Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	//// } DOAM
	
	
	Если Не Объект.Ссылка.Пустая() Тогда // Если объект (карточка) имеет данные	
		
		Если РезультатПроверкиПрав = Истина
			И ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты) Тогда // 2024-12
			//-----------------------  Метаданные это классы (собрание описания объектов)
			
			Если РольДоступна("АдминистраторСистемы") Тогда // ОТЛАДКА
				ПараметрСообщения = ?(ПодразделениеОтветственного.Родитель.Ссылка.Пустая(),
					"", " (" + ПодразделениеОтветственного.Родитель.Наименование + ")");
				Сообщить("[doc8.3] "
					+ ТекущийПользователь.ПредставлениеВПерепискеСРангом + " имеет" 
					+ ?(СсылкаДелегат = Неопределено, " СВОИ", " делегированные")
					+ " Права доступа к подразделению " + ПодразделениеОтветственного.Наименование + ПараметрСообщения);
			КонецЕсли;
			
		Иначе
			
			Если Не ПодразделениеОтветственного.Родитель.Родитель.Ссылка.Пустая() Тогда
				ПараметрСообщения = "подразделения " + ПодразделениеОтветственного.Родитель.Наименование;
			ИначеЕсли Не ПодразделениеОтветственного.Родитель.Ссылка.Пустая() Тогда
				ПараметрСообщения = "подразделения " + ПодразделениеОтветственного.Наименование;
			Иначе
				ПараметрСообщения = "департамента " + ПодразделениеОтветственного.Наименование;;
			КонецЕсли;	
			Сообщить("Нет прав доступа! Запросите данные у руководителя " + ПараметрСообщения);
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		//// Перезаписывается только при "Записи" данных пользователя, но Не при изменении Структуры предприятия
		//Сообщить(ПодразделениеОтветственного.РуководительОтветственного.ПредставлениеВПерепискеСРангом);
	КонецЕсли;
	
	// страница для расширенных реквизитов
	Страница 			= Элементы.Добавить("ГруппаРасширения", Тип("ГруппаФормы"), Элементы.Страницы);
	Страница.Вид 		= ВидГруппыФормы.Страница;
	Страница.Заголовок 	= "Расширенные реквизиты";
	
	Реквизиты 	= Новый Массив;
	
	РасшДОАМ_СоздатьТаблицуОписанияРасширенныхРеквизитов(Реквизиты);
	
	// добавляются реквизиты формы
	ТЗРеквизиты = ОбщегоНазначенияДОАМ.РасшДОАМ_ПолучитьРасширенныеРеквизиты();
	Для Каждого текРеквизит Из ТЗРеквизиты Цикл
		ИмяПоля		= текРеквизит.ИмяПоля;
		Реквизит	= Новый РеквизитФормы(ИмяПоля, Новый ОписаниеТипов("СписокЗначений"),,текРеквизит.Наименование);
		Реквизиты.Добавить(Реквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	
	ТЗРасширенныхРеквизитов = ЭтаФорма.ТаблицаОписанияРасширенныхРеквизитов;
	
	// создаются поля на форме
	Для Каждого текРеквизит Из ТЗРеквизиты Цикл
		
		ИмяПоля							= текРеквизит.ИмяПоля;
		СвойствоРеквизит				= текРеквизит.Свойство;
		ТипЗначения						= текРеквизит.ТипЗначения;
		ЗаголовокРеквизита				= текРеквизит.Наименование;
		
		ЭтаФорма[ИмяПоля].ТипЗначения	= ТипЗначения; // Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"); или 	Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
		НовыйЭлемент					= Элементы.Вставить(ИмяПоля, Тип("ПолеФормы"), Страница);
		НовыйЭлемент.Вид				= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным		= ИмяПоля;
		НовыйЭлемент.Заголовок			= ЗаголовокРеквизита;
		НовыйЭлемент.АвтоОтметкаНезаполненного = текРеквизит.ЗаполнятьОбязательно;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииПоляРасширенногоРеквизита");
		
		// установить параметры выбора, чтобы при выборе в списке отображался только нужный тип данных
		ПараметрСвойство				= Новый ПараметрВыбора("Отбор.Владелец", СвойствоРеквизит);
		МассивПараметров				= Новый Массив();
		МассивПараметров.Добавить(ПараметрСвойство);
		ФиксМассПараметров				= Новый ФиксированныйМассив(МассивПараметров);
		НовыйЭлемент.ПараметрыВыбора	= ФиксМассПараметров;
		
		// загрузка значений в реквизиты формы из регистра
		ТЗ = Объект.РасширенныеРеквизиты.Выгрузить(Новый Структура("Свойство", СвойствоРеквизит), "Значение");
		МассивЗначений = ТЗ.ВыгрузитьКолонку("Значение");
		ЭтаФорма[ИмяПоля].ЗагрузитьЗначения( МассивЗначений );
		
		НоваяСтрока = ТЗРасширенныхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, текРеквизит);
		
	КонецЦикла;
		
	// Перемещение вкладки в карточке контрагента // 2018-03
	Страница = Элементы.Страницы.ПодчиненныеЭлементы.Найти("ГруппаИсторияВзаимодействия");
	Элементы.Переместить(Страница, Элементы.Страницы);
	
	
	Если Параметры.Ключ.Пустая() Тогда
		НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "СозданиеКарточки");
		НоваяСтрока.Значение = ТекущаяДата();
	КонецЕсли;
	
	ОбщийДОАМКлиентСервер.ВывестиСтрокиТаблицыИсточника(ЭтаФорма, Объект.Соавторы, Элементы.ГруппаСоавторы);
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПаспортныеДанные = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(Объект.ФизЛицо);
		ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("СНИЛС", ИСТИНА);
		СНИЛС =СтрЗаменить(РегистрыСведений.ДокументыФизическихЛиц.ПолучитьДанныеДокумента(Объект.ФизЛицо, ВидДокумента, "Серия"), "СНИЛС","");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_ПриОткрытииПосле(Отказ)
	
	ПереносПолейКарточкиКонтрагента(); // ПЕРЕНОС ПОЛЕЙ 2018-03

КонецПроцедуры

&НаСервере
Процедура РасшДОАМ_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// требуется сохранить все значения расширенных реквизитов
	ТЗРасширенныхРеквизитов = ЭтаФорма.ТаблицаОписанияРасширенныхРеквизитов;
	Объект.РасширенныеРеквизиты.Очистить();
	ТЗ = Объект.РасширенныеРеквизиты.Выгрузить().СкопироватьКолонки();
	Для Каждого текРеквизит Из ТЗРасширенныхРеквизитов Цикл
		
		ИмяПоля							= текРеквизит.ИмяПоля;
		СвойствоРеквизит				= текРеквизит.Свойство;
		
		МассивЗначений					= ЭтаФорма[ИмяПоля].ВыгрузитьЗначения();
		Для Каждого текЗначение Из МассивЗначений Цикл
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Свойство		= СвойствоРеквизит;
			НоваяСтрока.Значение		= текЗначение;
		КонецЦикла;
	
	КонецЦикла;
	ТекущийОбъект.РасширенныеРеквизиты.Загрузить(ТЗ);
	
	ДатаПоследняя = Дата(1,1,1);
	Если Объект.ИсторияВзаимодействия.Количество() > 0 Тогда
		ТЗИстория = Объект.ИсторияВзаимодействия.Выгрузить(,"Дата");
		ТЗИстория.Сортировать("Дата Убыв");
		ДатаПоследняя = ТЗИстория[0].Дата;
	КонецЕсли;

	ТекущийОбъект.ДатаПоследняя = ДатаПоследняя;

КонецПроцедуры


&НаСервере
// проверяется заполненность обязательных полей расширенных реквизитов
// (для обычных доп реквизитов это уже реализовано в стандартном модуле)
Процедура РасшДОАМ_ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТЗРасширенные = ЭтаФорма.ТаблицаОписанияРасширенныхРеквизитов;
	Для Каждого текРеквизит Из ТЗРасширенные Цикл
		
		Если Элементы[текРеквизит.ИмяПоля].ОтметкаНезаполненного Тогда
			Сообщить("Поле: """ + текРеквизит.Наименование + """ не заполнено!");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_ЮрФизЛицоПриИзмененииПосле(Элемент)
	
	ПереносПолейКарточкиКонтрагента(); // ПЕРЕНОС ПОЛЕЙ 2018-03
	
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_ИсторияВзаимодействияПриНачалеРедактированияПосле(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Или Копирование Тогда
		Элемент.ТекущиеДанные.АвторКомментария = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_СоавторыДобавитьПосле(Команда)
	
	РасшДОАМ_СоавторыДобавитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасшДОАМ_СоавторыДобавитьНаСервере()
	
	ОбщийДОАМКлиентСервер.ДобавитьСтроку(ЭтаФорма, Объект.Соавторы, Элементы.ГруппаСоавторы, 10);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшДОАМ_СоавторыУдалитьПосле(Команда)
	
	ОбщийДОАМКлиентСервер.УдалитьСтроку(ЭтаФорма, Объект.Соавторы, Элементы.ГруппаСоавторы);
	
КонецПроцедуры
