
/////////////////////////////////////////////////
// ДОП и РАСШ Реквизиты

&НаСервере
Функция РасшДОАМ_ПолучитьСвойстваДляПоиска()
	
	// выбираем свойства у которых пустой набор доп реквизитов
	НаборСвойствПустая		= Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
	НаборСвойствКонтр		= Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ДополнительныеРеквизитыИСведения.УникальныйКодДляПоля КАК ИмяПоля,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойствПустая
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСписок,
	|	ДополнительныеРеквизитыИСведения.ВыводитьНаГлавной,
	|	ДополнительныеРеквизитыИСведения.ВыполнятьПоиск
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	(ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойствПустая
	|			ИЛИ ДополнительныеРеквизитыИСведения.НаборСвойств В ИЕРАРХИИ (&НаборСвойствКонтр))
	|	И ДополнительныеРеквизитыИСведения.ВыполнятьПоиск";	
	Запрос.УстановитьПараметр("НаборСвойствПустая", 	НаборСвойствПустая);
	Запрос.УстановитьПараметр("НаборСвойствКонтр",	 	НаборСвойствКонтр);
	РезультатЗапроса 	= Запрос.Выполнить();	
	ТЗРеквизиты 	= РезультатЗапроса.Выгрузить();
	
	Возврат ТЗРеквизиты;
	
КонецФункции

&НаСервере
Функция РасшДОАМ_ПолучитьДополнительныеРеквизитыНаГлавную()
	
	// выбираем свойства у которых предопределенный набор доп реквизитов Контрагенты
 	НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ДополнительныеРеквизитыИСведения.УникальныйКодДляПоля КАК ИмяПоля,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК НазваниеКолонки,
	|	ДополнительныеРеквизитыИСведения.ВыводитьНаГлавной,
	|	ДополнительныеРеквизитыИСведения.ВыполнятьПоиск
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств В ИЕРАРХИИ(&НаборСвойств)
	|	И ДополнительныеРеквизитыИСведения.ВыводитьНаГлавной";	
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);	
	РезультатЗапроса 	= Запрос.Выполнить();	
	ТЗРеквизиты 		= РезультатЗапроса.Выгрузить();
	
	Для Каждого текСвойство Из ТЗРеквизиты Цикл	
		// Все первые буквы слов сделать главными, пробелы убрать
		// Место работы -> МестоРаботы
		текСвойство.НазваниеКолонки = СтрЗаменить(ТРег(текСвойство.НазваниеКолонки), " ", ""); 
		// Убрать скобки
		текСвойство.НазваниеКолонки = СтрЗаменить(СтрЗаменить(текСвойство.НазваниеКолонки, "(", ""), ")", "");
		
		
		// Убрать из "Наименование" всё, кроме значаний в скобках
		Если СтрЧислоВхождений(текСвойство.Наименование, ")") >= 1 Тогда
			НаименованиеВСкобкахНачало = СтрНайти(текСвойство.Наименование, "(") + 1;
			НаименованиеВСкобкахКонец = СтрНайти(текСвойство.Наименование, ")", , НаименованиеВСкобкахНачало);
			текСвойство.Наименование = Сред(текСвойство.Наименование, НаименованиеВСкобкахНачало, НаименованиеВСкобкахКонец - НаименованиеВСкобкахНачало);
		КонецЕсли;
	КонецЦикла;

	Возврат ТЗРеквизиты;
	
КонецФункции

&НаСервере
Процедура РасшДОАМ_СоздатьТаблицуОписанияПолейОтбора(Реквизиты)
	
	ИмяОписания = "ТаблицаОписанияПолейОтбора";
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));

	Реквизиты.Добавить(Новый РеквизитФормы(
		"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
			ИмяОписания));
			
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписания));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ИмяПоля", Новый ОписаниеТипов("Строка"), ИмяОписания));
		
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ИмяФлажка", Новый ОписаниеТипов("Строка"), ИмяОписания));
		
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ИмяУсловия", Новый ОписаниеТипов("Строка"), ИмяОписания));
		
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяОписания));
			
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ЭтоСписок", Новый ОписаниеТипов("Булево"), ИмяОписания));
		
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Выбран", Новый ОписаниеТипов("Булево"), ИмяОписания));

	Реквизиты.Добавить(Новый РеквизитФормы(
		"УсловиеИ", Новый ОписаниеТипов("Булево"), ИмяОписания));
		
КонецПроцедуры

&НаСервере
Процедура СоздатьДополнительныеПоляСписка()
	
	ТЗСвойства 	= РасшДОАМ_ПолучитьДополнительныеРеквизитыНаГлавную();
	
	ТекстНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка,
			|	Контрагенты.ЮрФизЛицо";
	ТекстИЗ = "
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты";		
	
	ТекстВыбПоля 	= "";
	ТекстСоединения = "";
	текНомер 		= 1;
	ВсегоСвойств = ТЗСвойства.Количество();
	Если ВсегоСвойств>0 Тогда
		ТекстНачало = ТекстНачало + ",";
	КонецЕсли;
	
	Для Каждого текСвойство Из ТЗСвойства Цикл
		
		ТекстВыбПоля = ТекстВыбПоля + "
		|	ВложенныйЗапрос" + текНомер + ".Значение КАК " + текСвойство.НазваниеКолонки;
		
		Если текНомер<>ВсегоСвойств Тогда
			ТекстВыбПоля = ТекстВыбПоля + ",";
		КонецЕсли;

		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтрагентыДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|			КонтрагентыДополнительныеРеквизиты.Значение КАК Значение
		|		ИЗ
		|			Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		|		ГДЕ
		|			КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство" + текНомер + ") КАК ВложенныйЗапрос" + текНомер + "
		|		ПО Контрагенты.Ссылка = ВложенныйЗапрос" + текНомер + ".Ссылка";
		
		текНомер = текНомер + 1;
			
	КонецЦикла;	
	
	Список.ТекстЗапроса = ТекстНачало + ТекстВыбПоля + ТекстИЗ + ТекстСоединения;
	
	текНомер = 1;
	Для Каждого текСвойство Из ТЗСвойства Цикл
				
		Список.Параметры.УстановитьЗначениеПараметра("Свойство" + текНомер + "", 			текСвойство.Свойство);

		НовыйЭлемент 				= Элементы.Вставить(текСвойство.НазваниеКолонки, Тип("ПолеФормы"), Элементы.Список);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;	
		НовыйЭлемент.ПутьКДанным 	= "Список." + текСвойство.НазваниеКолонки;
		НовыйЭлемент.Заголовок		= текСвойство.Наименование;
		текНомер = текНомер + 1;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыОтбора()
	
	ТЗСвойства = РасшДОАМ_ПолучитьСвойстваДляПоиска();
	
	// создаются реквизиты формы
	Реквизиты = Новый Массив;
	РасшДОАМ_СоздатьТаблицуОписанияПолейОтбора(Реквизиты);	
	Для Каждого текРеквизит Из ТЗСвойства Цикл

		ИмяПоля 		= текРеквизит.ИмяПоля;			// УникальныйКодДляПоля
		ТипЗначения		= текРеквизит.ТипЗначения;
		// если реквизит расширенный - то список, иначе одно значение
		ТипПоля 		= ?(текРеквизит.ЭтоСписок, Новый ОписаниеТипов("СписокЗначений"), ТипЗначения); 
		Реквизит 		= Новый РеквизитФормы(ИмяПоля, ТипПоля, , текРеквизит.Наименование);	
		Реквизиты.Добавить(Реквизит);
		
		// флаг для отметки использования поля в отборе
		ИмяФлажка 		= "фл_" + ИмяПоля;  
		Реквизит 		= Новый РеквизитФормы(ИмяФлажка, Новый ОписаниеТипов("Булево"), , текРеквизит.Наименование);	
		Реквизиты.Добавить(Реквизит);

		// условие для списков И ИЛИ
		Если текРеквизит.ЭтоСписок Тогда
			ИмяУсловия = "усл_" + ИмяПоля;
			Реквизит 		= Новый РеквизитФормы(ИмяУсловия, Новый ОписаниеТипов("Булево"), , "Условие " + текРеквизит.Наименование);
			Реквизиты.Добавить(Реквизит);
		КонецЕсли;
		
	КонецЦикла;	
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	//ТаблицаОписанияПолейОтбора = ЭтаФорма.ТаблицаОписанияПолейОтбора;
	
	// создаются поля на форме
	Для Каждого текРеквизит Из ТЗСвойства Цикл
		                      
		ИмяПоля 			= текРеквизит.ИмяПоля;		// УникальныйКодДляПоля
		ИмяФлажка 			= "фл_" + ИмяПоля;
		СвойствоРеквизит 	= текРеквизит.Свойство;
		ТипЗначения			= текРеквизит.ТипЗначения;
		
		НоваяСтрокаТабОтбора 				= ЭтаФорма.ТаблицаОписанияПолейОтбора.Добавить();
		НоваяСтрокаТабОтбора.Наименование	= текРеквизит.Наименование;
		НоваяСтрокаТабОтбора.ИмяПоля 		= ИмяПоля;
		НоваяСтрокаТабОтбора.ИмяФлажка 		= ИмяФлажка;
		НоваяСтрокаТабОтбора.Свойство 		= СвойствоРеквизит;
		НоваяСтрокаТабОтбора.ТипЗначения 	= ТипЗначения;
		НоваяСтрокаТабОтбора.ЭтоСписок 		= текРеквизит.ЭтоСписок;
		
		// группа для одного поля поиска (флаг с надписью + поле со значением)
		НоваяГруппа 							= Элементы.Вставить("Группа"+ИмяПоля, Тип("ГруппаФормы"), Элементы.ГруппаОтбора);
	    НоваяГруппа.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Группировка	 				= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.ОтображатьЗаголовок 		= Ложь;
		НоваяГруппа.Отображение 				= ОтображениеОбычнойГруппы.Нет;
		
		// поле флага
		НовыйЭлемент 							= Элементы.Вставить(ИмяФлажка, Тип("ПолеФормы"), НоваяГруппа);
		НовыйЭлемент.Вид						= ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным				= ИмяФлажка;
		НовыйЭлемент.Подсказка					= "Флаг " + текРеквизит.Наименование;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ФлагПоляОтбораПриИзменении");
				
		//поле выбора значения
		Если текРеквизит.ЭтоСписок Тогда
			ЭтаФорма[ИмяПоля].ТипЗначения  = ТипЗначения;
			                  
			//поле выбора условия
			ИмяУсловия					 			= "усл_" + ИмяПоля;
			НовыйЭлемент 							= Элементы.Вставить(ИмяУсловия, Тип("ПолеФормы"), НоваяГруппа);
			НовыйЭлемент.Вид						= ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ПутьКДанным				= ИмяУсловия;
			НовыйЭлемент.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
			НовыйЭлемент.ВидФлажка 					= ВидФлажка.Тумблер;
			НовыйЭлемент.ФорматРедактирования		= "БЛ='ИЛИ'; БИ=И";
			НовыйЭлемент.Подсказка					= "ИЛИ - встречается хотя бы одно значение из списка" + Символы.ПС +
													  Символы.Таб + "  И - должны присутствовать все значения";
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "УсловиеПоляОтбораПриИзменении");

			НоваяСтрокаТабОтбора.ИмяУсловия 		= ИмяУсловия;
			
		КонецЕсли;
		
		НовыйЭлемент 							= Элементы.Вставить(ИмяПоля, Тип("ПолеФормы"), НоваяГруппа);
		НовыйЭлемент.Вид						= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным				= ИмяПоля;
		НовыйЭлемент.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.КнопкаОчистки 				= Истина;
		// установить параметры выбора, чтобы при выборе в списке отображался только нужный тип данных
		ПараметрСвойство						= Новый ПараметрВыбора("Отбор.Владелец", СвойствоРеквизит);
		МассивПараметров						= Новый Массив();
		МассивПараметров.Добавить(ПараметрСвойство);
		ФиксМассПараметров						= Новый ФиксированныйМассив(МассивПараметров);
		НовыйЭлемент.ПараметрыВыбора			= ФиксМассПараметров; 
		
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПолеОтбораПриИзменении");
	КонецЦикла;	
	
КонецПроцедуры

// миникарточка
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьОбластьОбзора"] = Неопределено Тогда 
		ПоказыватьОбластьОбзора = Ложь;
	Иначе 
		ПоказыватьОбластьОбзора = Настройки["ПоказыватьОбластьОбзора"];
	КонецЕсли;
	
	Элементы.СписокПоказыватьОбластьОбзора.Пометка = ПоказыватьОбластьОбзора;
	Если ПоказыватьОбластьОбзора Тогда 
		Элементы.ГруппаМиникарточка.Видимость = Истина;
	Иначе 
		Элементы.ГруппаМиникарточка.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОбластьОбзора(Команда)
	
	ПоказыватьОбластьОбзора = Не ПоказыватьОбластьОбзора;
	Если ПоказыватьОбластьОбзора Тогда 
		Элементы.ГруппаМиникарточка.Видимость = Истина;
		ОбновитьМиникарточку();
	Иначе 
		Элементы.ГруппаМиникарточка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СписокПоказыватьОбластьОбзора.Пометка = ПоказыватьОбластьОбзора;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если ПоказыватьОбластьОбзора Тогда	
		ПодключитьОбработчикОжидания("ОбновитьМиникарточку", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодпись(HTMLТекст, Подпись)
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<font color=""#333333"">";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</font>";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначение(HTMLТекст, ЗначениеДанных, Цвет)
	
	Значение = ЗначениеДанных;

	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<font color=""#"+Цвет+"""><b>";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</b></font>";
		Иначе	
			HTMLТекст = HTMLТекст + "<b>";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</b>";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда 
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<font color=""#"+Цвет+"""><b>";
			HTMLТекст = HTMLТекст + Значение;
			HTMLТекст = HTMLТекст + "</b></font>";
		Иначе	
			HTMLТекст = HTMLТекст + "<b>";
			HTMLТекст = HTMLТекст +Значение;
			HTMLТекст = HTMLТекст + "</b>";
		КонецЕсли;	
	Иначе
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<a href=v8doc:%1><b>%2</b></a>",
			ПолучитьНавигационнуюСсылку(Значение),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Строка(Значение)));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизит(HTMLТекст, Подпись, Значение, Цвет = "")
	
	ДобавитьПодпись(HTMLТекст, Подпись);
	ДобавитьЗначение(HTMLТекст, Значение, Цвет); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитHTML(КонтрагентСсылка, HTMLТекст, ИмяСвойства, Подпись="")
	
	СвойствоРасш = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
	ТЗ = КонтрагентСсылка.РасширенныеРеквизиты.Выгрузить(Новый Структура("Свойство", СвойствоРасш), "Значение");
	Если ТЗ.Количество() > 0 Тогда
		ЗначениеСтрока = "";
		Для Каждого текЗнач Из ТЗ Цикл
			ЗначениеСтрока = ЗначениеСтрока + текЗнач.Значение + ", ";
		КонецЦикла;
		ЗначениеСтрока = Лев(ЗначениеСтрока, СтрДлина(ЗначениеСтрока) - 2);	
		
		Если ЗначениеСтрока = "_Не определена_" Тогда
			ЗначениеСтрока = "Не определена";
			ЦветКопметенции = "FF0000"; // Красный
		Иначе
			ЦветКопметенции = "";
		КонецЕсли;
		
		ДобавитьРеквизит(HTMLТекст, Подпись, ЗначениеСтрока, ЦветКопметенции);
		
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////
// ПЕРЕЗАГРУЗКА ОТБОРОВ И СПИСКА

&НаКлиенте
Процедура ПерезагрузитьСписок(Команда)
	
	ПерезагрузитьКолонкиСпискаНаСервере();	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПерезагрузитьКолонкиСпискаНаСервере()
		
	МассивНаУдаление = Новый Массив;
	Для Каждого текЭл Из Элементы.Список.ПодчиненныеЭлементы Цикл
		Если СтрНайти(текЭл.Имя, "Список") = 0 Тогда  
			МассивНаУдаление.Добавить(текЭл); 
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого текЭл Из МассивНаУдаление Цикл
		Элементы.Удалить(текЭл);
	КонецЦикла;
	
	СоздатьДополнительныеПоляСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборы(Команда) //?
	
	ОбновитьОтборыНаСервере();	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборыНаСервере()
	
	МассивНаУдаление = Новый Массив;
	Для Каждого текЭл ИЗ Элементы.ГруппаОтбора.ПодчиненныеЭлементы Цикл
		МассивНаУдаление.Добавить(текЭл);
	КонецЦикла;
	Для Каждого текЭл Из МассивНаУдаление Цикл
		Элементы.Удалить(текЭл);
	КонецЦикла;
	
	МассивРеквизитов = ЭтаФорма.ПолучитьРеквизиты();
	Реквизиты = Новый Массив;
	Для Каждого текРек Из МассивРеквизитов Цикл
		Если Лев(текРек.Имя, 4) = "Доп_" 
			ИЛИ Лев(текРек.Имя, 4) = "усл_" 
			ИЛИ Лев(текРек.Имя, 3) = "фл_" Тогда
			
			Реквизиты.Добавить(текРек.Имя);
		КонецЕсли;
	КонецЦикла;
	
	//Если Реквизиты.Количество() > 0 Тогда
		ЭтаФорма.ИзменитьРеквизиты(, Реквизиты);
	//КонецЕсли;
	
	СоздатьЭлементыОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// ОТБОР

//-- При изменении флагов и полей отборов
&НаКлиенте
Процедура ФлагПоляОтбораПриИзменении(Элемент)
	
	ИмяФлажка 				= Элемент.Имя;
	Масс 					= ЭтаФорма.ТаблицаОписанияПолейОтбора.НайтиСтроки( Новый Структура("ИмяФлажка", ИмяФлажка) );
	СтрокаТаблицы 			= Масс[0];
	СтрокаТаблицы.Выбран 	= ЭтаФорма[ИмяФлажка];
	ПрименитьОтборНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПоляОтбораПриИзменении(Элемент)
	
	ИмяУсловия 				= Элемент.Имя;
	Масс 					= ЭтаФорма.ТаблицаОписанияПолейОтбора.НайтиСтроки( Новый Структура("ИмяУсловия", ИмяУсловия) );
	СтрокаТаблицы 			= Масс[0];
	СтрокаТаблицы.УсловиеИ 	= ЭтаФорма[ИмяУсловия];
	
	ИмяФлажка = СтрЗаменить(ИмяУсловия, "усл_", "фл_");	
	Если ЭтаФорма[ИмяФлажка] Тогда
		ПрименитьОтборНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтбораПриИзменении(Элемент)
	
	
	ИмяФлажка = "фл_" + Элемент.Имя; 
	ЭтаФорма[ИмяФлажка] = Истина;
		
	ФлагПоляОтбораПриИзменении(Элементы[ИмяФлажка]);
	
КонецПроцедуры

//-- Применение отбора
&НаСервере
Процедура ПрименитьОтборНаСервере()
	
	// у списка есть отбор с коллекцией элементов, каждый представляет собой одно условие отбора. Очистим
	ЭлементыОтбора = Список.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	
	ТЗРеквизиты = Новый ТаблицаЗначений;
	ТЗРеквизиты = ЭтаФорма.ТаблицаОписанияПолейОтбора;	
	ТЗРеквизиты = РеквизитФормыВЗначение("ТаблицаОписанияПолейОтбора", Тип("ТаблицаЗначений"));
	ТЗВыбранных = ТЗРеквизиты.Скопировать( Новый Структура("Выбран", Истина) );
	
	КолУсловийВсего 	= ТЗВыбранных.Количество();	
	Если КолУсловийВсего = 0 Тогда
		//отборов нет
		Возврат;
	КонецЕсли;
	
	ТЗУсловиеИ 			= ТЗВыбранных.Скопировать( Новый Структура("УсловиеИ", Истина) );
	ТЗУсловиеИЛИ 		= ТЗВыбранных.Скопировать( Новый Структура("УсловиеИ", Ложь) );
	
	КолУсловийИ 		= ТЗУсловиеИ.Количество();	
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтрагентыДополнительныеРеквизиты.Ссылка КАК Ссылка,
	               |	КонтрагентыДополнительныеРеквизиты.Свойство КАК Свойство,
	               |	КонтрагентыДополнительныеРеквизиты.Значение КАК Значение
	               |ПОМЕСТИТЬ ВсеЗначения
	               |ИЗ
	               |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КонтрагентыРасширенныеРеквизиты.Ссылка,
	               |	КонтрагентыРасширенныеРеквизиты.Свойство,
	               |	КонтрагентыРасширенныеРеквизиты.Значение
	               |ИЗ
	               |	Справочник.Контрагенты.РасширенныеРеквизиты КАК КонтрагентыРасширенныеРеквизиты
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////";
	
	Если КолУсловийИ = 0 Тогда
		// только условия ИЛИ
		ПолучитьЗапросИЛИ(ТекстЗапроса, Запрос, ТЗУсловиеИЛИ);
		
	ИначеЕсли КолУсловийВсего=КолУсловийИ Тогда
		//только условия И
		ПолучитьЗапросИ(ТекстЗапроса, Запрос, ТЗУсловиеИ);	
	Иначе
		// есть оба вида условий
		ПолучитьЗапросИЛИ(ТекстЗапроса, Запрос, ТЗУсловиеИЛИ);
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";		
		ПолучитьЗапросИ(ТекстЗапроса, Запрос, ТЗУсловиеИ);
		ОбъединитьЗапросы(ТекстЗапроса);
	КонецЕсли;
	
	Запрос.Текст 		= ТекстЗапроса;
	// Ошибка: времени выполнения, при вывозе метода контекста
	РезультатЗапроса 	= Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ТЗРезультат 		= РезультатЗапроса[РезультатЗапроса.ВГраница()];
	ТЗСсылки 			= ТЗРезультат.Выгрузить();
	// получаем массив контрагентов подходящих нашему отбору
	МассивСсылок 		= ТЗСсылки.ВыгрузитьКолонку("Ссылка");

	// устанавливаем отбор списка: только контрагенты полученные запросом выше	
	ЭлементОтбораДанных 				= ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных( "Ссылка" );
	ЭлементОтбораДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораДанных.ПравоеЗначение 	= МассивСсылок;
	ЭлементОтбораДанных.Использование 	= Истина;		
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапросИЛИ(ТекстЗапроса, Запрос, ТЗВыбранных)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ВсеЗначения.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВсеЗначения.Свойство) КАК Свойство
	|ПОМЕСТИТЬ ВыборкаИЛИ
	|ИЗ
	|	ВсеЗначения КАК ВсеЗначения
	|ГДЕ";
	
	НомерРеквизита = 1;			   
	Для Каждого текРеквизит Из ТЗВыбранных Цикл
		
		ИмяПоля  = текРеквизит.ИмяПоля;
		Свойство = текРеквизит.Свойство;
		
		Если текРеквизит.ЭтоСписок Тогда
			ЗначРеквизита 	= ЭтаФорма[ИмяПоля].ВыгрузитьЗначения();				
		Иначе
			ЗначРеквизита 	= ЭтаФорма[ИмяПоля];		
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ?(НомерРеквизита>1, " ИЛИ ", "") + "
		|	(ВсеЗначения.Свойство = &Свойство" + НомерРеквизита + "
		|				И ВсеЗначения.Значение В ИЕРАРХИИ (&Значение" + НомерРеквизита + "))";
		
		Запрос.УстановитьПараметр("Свойство" + НомерРеквизита, Свойство);
		Запрос.УстановитьПараметр("Значение" + НомерРеквизита, ЗначРеквизита);
		
		НомерРеквизита = НомерРеквизита + 1;		  
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|СГРУППИРОВАТЬ ПО
	|	ВсеЗначения.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВсеЗначения.Свойство) >= &КолУсловийИЛИ";		
	
	Запрос.УстановитьПараметр("КолУсловийИЛИ", НомерРеквизита-1);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапросИ(ТекстЗапроса, Запрос, ТЗВыбранных)
		
	НомерРеквизита 	= 1;
	КолУсловийИ 	= 0;
	флПоместить = Истина;
	Для Каждого текРеквизит Из ТЗВыбранных Цикл
		ИмяПоля  		= текРеквизит.ИмяПоля;
		Свойство 		= текРеквизит.Свойство;
		МассЗначений 	= ЭтаФорма[ИмяПоля].ВыгрузитьЗначения();
		
		Если МассЗначений.Количество() = 0 Тогда
			
			МассЗначений.Добавить(Справочники.ЗначенияСвойствОбъектовИерархия.ПустаяСсылка());
		КонецЕсли;
		
		КолУсловийИ 	= КолУсловийИ + МассЗначений.Количество();
		
		НомерЗначения = 1;
		Для Каждого текЗначение Из МассЗначений Цикл
						
			ТекстЗапроса = ТекстЗапроса + ?(НЕ флПоместить, "
							   |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |", "");			
			
			ТекстЗапроса = ТекстЗапроса + "
				               |ВЫБРАТЬ
				               |	ВсеЗначения.Ссылка";
							   
			   Если (НомерРеквизита=1 И НомерЗначения=1) ИЛИ флПоместить Тогда			   
				   ТекстЗапроса = ТекстЗапроса + "
				   					|ПОМЕСТИТЬ ТЗОбъединенная";
				   флПоместить = Ложь;
			   КонецЕсли;
						   
			ТекстЗапроса = ТекстЗапроса + "
							   |ИЗ
				               |	ВсеЗначения КАК ВсеЗначения
				               |ГДЕ
				               |	ВсеЗначения.Свойство = &Св"	  +НомерРеквизита+"
				               |	И ВсеЗначения.Значение В ИЕРАРХИИ(&Зн" +НомерРеквизита+"_"+НомерЗначения+")";			
			
			Запрос.УстановитьПараметр("Св" + НомерРеквизита, 					Свойство);
			Запрос.УстановитьПараметр("Зн" + НомерРеквизита+"_"+НомерЗначения, 	текЗначение);
			
			НомерЗначения = НомерЗначения + 1;		
		КонецЦикла;
		
		НомерРеквизита = НомерРеквизита + 1;
	КонецЦикла;
	
	Если КолУсловийИ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗОбъединенная.Ссылка,
	               |	КОЛИЧЕСТВО(ТЗОбъединенная.Ссылка) КАК Количество
				   |ПОМЕСТИТЬ ВыборкаИ				   
				   |ИЗ
	               |	ТЗОбъединенная КАК ТЗОбъединенная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЗОбъединенная.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(ТЗОбъединенная.Ссылка) >= &КолУсловийИ";
				   
	Запрос.УстановитьПараметр("КолУсловийИ", КолУсловийИ);
		
КонецПроцедуры

&НаСервере
Процедура ОбъединитьЗапросы(ТекстЗапроса)
	
      ТекстЗапроса = ТекстЗапроса+ "
	  |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ
      |	ВыборкаИ.Ссылка
	  |ПОМЕСТИТЬ ИтоговаяТаблица
      |ИЗ
      |	ВыборкаИ КАК ВыборкаИ
      |
      |ОБЪЕДИНИТЬ ВСЕ
      |
      |ВЫБРАТЬ
      |	ВыборкаИЛИ.Ссылка
      |ИЗ
      |	ВыборкаИЛИ КАК ВыборкаИЛИ
      |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ
	  |	ИтоговаяТаблица.Ссылка,
	  |	Количество(ИтоговаяТаблица.Ссылка) КАК Количество
	  |ИЗ
	  |	ИтоговаяТаблица КАК ИтоговаяТаблица
	  |
	  |СГРУППИРОВАТЬ ПО
	  |	ИтоговаяТаблица.Ссылка
	  |
	  |ИМЕЮЩИЕ
	  |	Количество(ИтоговаяТаблица.Ссылка) = 2";	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// ПЕЧАТЬ

&НаСервере
Функция ПечатьСпискаНаСервере()

	ТабДок 			= Новый ТабличныйДокумент;

	ОбОбработка 	= РеквизитФормыВЗначение("Объект");
	Макет 			= ОбОбработка.ПолучитьМакет("МакетСписка");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");	
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	// получение таблицы значений из динамического списка при помощи мудреных команд, которые рекомендуют в компании 1С	
	Схема 		= Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки 	= Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);	
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
	
	ТабДок.Вывести(ОбластьШапка);	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	Для Каждого текСтрока Из ТЗ Цикл
		
		// ИЗ СХЕМЫ
		ОбластьСтрокаТаблицы.Параметры.Ответственный = текСтрока.СсылкаОтветственныйНаименование;
		ОбластьСтрокаТаблицы.Параметры.Наименование = текСтрока.Ссылка;
		ОбластьСтрокаТаблицы.Параметры.МестоРаботы = текСтрока.МестоРаботы;
		ОбластьСтрокаТаблицы.Параметры.Статус = текСтрока.Статус;
		
		ОбластьСтрокаТаблицы.Параметры.РИЦ 				= ПолучитьЗначениеСвойстваЧерезЗапятую(текСтрока.Ссылка, "РИЦ");
		ОбластьСтрокаТаблицы.Параметры.Проект 			= ПолучитьЗначениеСвойстваЧерезЗапятую(текСтрока.Ссылка, "Проект");
		ОбластьСтрокаТаблицы.Параметры.Компетенция 		= ПолучитьЗначениеСвойстваЧерезЗапятую(текСтрока.Ссылка, "Компетенция");
		ТабДок.Вывести( ОбластьСтрокаТаблицы );
		
	КонецЦикла;
	
		
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ПечатьСписка(Команда)
	
	ТабДок = Новый ТабличныйДокумент;

	ТабДок = ПечатьСпискаНаСервере();		
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.РазмерКолонтитулаСнизу 	= 0;
	ТабДок.ПолеСверху 	= 0;
	ТабДок.ПолеСнизу 	= 0;
	ТабДок.ПолеСлева 	= 0;
	ТабДок.ПолеСправа 	= 0;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ИмяПараметровПечати = "СписокПоставщиков_ДОАМ";
	ТабДок.Показать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСвойстваЧерезЗапятую(КонтрагентСсылка, ИмяСвойства)
	
	СвойствоРасш 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
	ТЗ 				= КонтрагентСсылка.РасширенныеРеквизиты.Выгрузить(Новый Структура("Свойство", СвойствоРасш), "Значение");
	Если ТЗ.Количество() > 0 Тогда
		ЗначениеСтрока = "";
		Для Каждого текЗнач Из ТЗ Цикл
			ЗначениеСтрока = ЗначениеСтрока + текЗнач.Значение + ", ";
		КонецЦикла;
		ЗначениеСтрока = Лев(ЗначениеСтрока, СтрДлина(ЗначениеСтрока) - 2);	
	Иначе
		Если ИмяСвойства = "РИЦ" Тогда
			ЗначениеСтрока = "не РИЦ";
		Иначе
			ЗначениеСтрока = "(не заполнено)";
		КонецЕсли
	КонецЕсли;	
	
	Возврат ЗначениеСтрока;
	
КонецФункции

Текст1 = "ВЫБРАТЬ
|	КонтрагентыДополнительныеРеквизиты.Ссылка КАК Ссылка,
|	КонтрагентыДополнительныеРеквизиты.Свойство КАК Свойство,
|	КонтрагентыДополнительныеРеквизиты.Значение КАК Значение
|ПОМЕСТИТЬ ВсеЗначения
|ИЗ
|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	КонтрагентыРасширенныеРеквизиты.Ссылка,
|	КонтрагентыРасширенныеРеквизиты.Свойство,
|	КонтрагентыРасширенныеРеквизиты.Значение
|ИЗ
|	Справочник.Контрагенты.РасширенныеРеквизиты КАК КонтрагентыРасширенныеРеквизиты
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВсеЗначения.Ссылка
|ПОМЕСТИТЬ ТЗОбъединенная
|ИЗ
|	ВсеЗначения КАК ВсеЗначения
|ГДЕ
|	ВсеЗначения.Свойство = &Св1
|	И ВсеЗначения.Значение В ИЕРАРХИИ(&Зн1_1)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ВсеЗначения.Ссылка
|ИЗ
|	ВсеЗначения КАК ВсеЗначения
|ГДЕ
|	ВсеЗначения.Свойство = &Св2
|	И ВсеЗначения.Значение В ИЕРАРХИИ(&Зн2_1)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ВсеЗначения.Ссылка
|ИЗ
|	ВсеЗначения КАК ВсеЗначения
|ГДЕ
|	ВсеЗначения.Свойство = &Св2
|	И ВсеЗначения.Значение В ИЕРАРХИИ(&Зн2_2)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ВсеЗначения.Ссылка
|ИЗ
|	ВсеЗначения КАК ВсеЗначения
|ГДЕ
|	ВсеЗначения.Свойство = &Св2
|	И ВсеЗначения.Значение В ИЕРАРХИИ(&Зн2_3)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ВсеЗначения.Ссылка
|ИЗ
|	ВсеЗначения КАК ВсеЗначения
|ГДЕ
|	ВсеЗначения.Свойство = &Св3
|	И ВсеЗначения.Значение В ИЕРАРХИИ(&Зн3_1)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ВсеЗначения.Ссылка
|ИЗ
|	ВсеЗначения КАК ВсеЗначения
|ГДЕ
|	ВсеЗначения.Свойство = &Св3
|	И ВсеЗначения.Значение В ИЕРАРХИИ(&Зн3_2)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТЗОбъединенная.Ссылка,
|	КОЛИЧЕСТВО(ТЗОбъединенная.Ссылка) КАК Количество
|ПОМЕСТИТЬ ВыборкаИ
|ИЗ
|	ТЗОбъединенная КАК ТЗОбъединенная
|
|СГРУППИРОВАТЬ ПО
|	ТЗОбъединенная.Ссылка
|
|ИМЕЮЩИЕ
|	КОЛИЧЕСТВО(ТЗОбъединенная.Ссылка) >= &КолУсловийИ";
